{
  "stats": {
    "suites": 8,
    "tests": 60,
    "passes": 60,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-19T20:46:48.876Z",
    "end": "2024-12-19T20:46:51.894Z",
    "duration": 3018,
    "testsRegistered": 60,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "66c121d3-2f93-4a50-970c-fff08f67e6c4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
          "title": "Classroom Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/classroom.integration.test.js",
          "file": "/tests/integration/classroom.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"before all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 988,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, and classrooms collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\n// Create a superadmin user\nconst newSuperadmin = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst superadminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSuperadmin);\nsuperadminId = superadminRes.body.user._id;\n// Authenticate the superadmin user\nconst superadminCredentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst superadminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(superadminCredentials);\nsuperadminToken = superadminAuthRes.body.token;\n// Create a schooladmin user\nconst newSchooladmin = {\n    username: 'School Admin',\n    email: 'schooladmin@example.com',\n    password: 'password123',\n    role: 'schooladmin'\n};\nconst schooladminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSchooladmin);\nschooladminId = schooladminRes.body.user._id;\n// Authenticate the schooladmin user\nconst schooladminCredentials = {\n    email: 'schooladmin@example.com',\n    password: 'password123'\n};\nconst schooladminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(schooladminCredentials);\nschooladminToken = schooladminAuthRes.body.token;\n// Create a school with the token of superadmin\nconst newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newSchool);\n\nschoolId = schoolRes.body._id;\n\n// Create a user with role 'user'\nconst newUser = {\n    username: 'Regular User',\n    email: 'user@example.com',\n    password: 'password123',\n    role: 'user'\n};\nconst userRes = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\n// Authenticate the user\nconst userCredentials = {\n    email: 'user@example.com',\n    password: 'password123'\n};\nconst userAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(userCredentials);\nuserToken = userAuthRes.body.token;",
              "err": {},
              "uuid": "f21db03a-bbce-41b2-bf0d-8b3126008f9a",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"after all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, and classrooms collections after all tests\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});",
              "err": {},
              "uuid": "b9370c9c-b52a-4ceb-8956-5e31d79e3d5d",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail to create a classroom with schooladmin user without school",
              "fullTitle": "Classroom Entity Integration Tests should fail to create a classroom with schooladmin user without school",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst res = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nexpect(res.status).to.equal(403);",
              "err": {},
              "uuid": "2ad48420-4786-4817-a73b-f62acaf445d1",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update schooladmin user to add school",
              "fullTitle": "Classroom Entity Integration Tests should update schooladmin user to add school",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedSchooladmin = {\n    school: schoolId\n};\nconst updateRes = await request(app)\n    .put(`/api/users/${schooladminId}`)\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(updatedSchooladmin);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.school).to.equal(schoolId);",
              "err": {},
              "uuid": "a422b67e-7c7b-4575-8f5d-c96b9a296c79",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new classroom with schooladmin user",
              "fullTitle": "Classroom Entity Integration Tests should create a new classroom with schooladmin user",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst res = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nclassroomId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newClassroom.name);\nexpect(res.body.school).to.equal(newClassroom.school);\nexpect(res.body.capacity).to.equal(newClassroom.capacity);\nexpect(res.body.resources).to.deep.equal(newClassroom.resources);",
              "err": {},
              "uuid": "3eb9a6b3-ba90-4fd8-86bf-e014213d9932",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom capacity",
              "fullTitle": "Classroom Entity Integration Tests should update a classroom capacity",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    capacity: 35\n};\nconst updateRes = await request(app)\n    .put(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedClassroom);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.capacity).to.equal(updatedClassroom.capacity);",
              "err": {},
              "uuid": "2715324d-044a-4c08-9eab-fd6b1f47cbec",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a classroom by ID",
              "fullTitle": "Classroom Entity Integration Tests should get a classroom by ID",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Test Classroom');\nexpect(getRes.body.school._id).to.equal(schoolId);\nexpect(getRes.body.capacity).to.equal(35);\nexpect(getRes.body.resources).to.deep.equal(['Projector', 'Whiteboard']);",
              "err": {},
              "uuid": "d4cf6e0a-a924-49ad-aa3f-80f1aabb58ae",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail get a classroom by invalid ID",
              "fullTitle": "Classroom Entity Integration Tests should fail get a classroom by invalid ID",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidClassroomId = '605c72ef1532074b4c20d1a1';\nconst getRes = await request(app)\n    .get(`/api/classrooms/${invalidClassroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(404);",
              "err": {},
              "uuid": "bd67e90e-8571-4bc8-9878-2b10b6b13bfc",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update a classroom with an invalid school",
              "fullTitle": "Classroom Entity Integration Tests should fail to update a classroom with an invalid school",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    school: 'invalidSchoolId'\n};\nconst updateRes = await request(app)\n    .put(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedClassroom);\nexpect(updateRes.status).to.equal(400);",
              "err": {},
              "uuid": "be02f8d1-970d-44c9-a78e-7b5ce3b93371",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update a classroom with access denied",
              "fullTitle": "Classroom Entity Integration Tests should fail to update a classroom with access denied",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Another Test School',\n    address: '456 Another St',\n    phone: '987-654-3210',\n    email: 'anothertestschool@example.com',\n    website: 'http://anothertestschool.com',\n    established: '2005-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newSchool);\nconst anotherSchoolId = schoolRes.body._id;\nconst updatedClassroom = {\n    school: anotherSchoolId\n};\nconst updateRes = await request(app)\n.put(`/api/classrooms/${classroomId}`)\n.set('Authorization', `Bearer ${schooladminToken}`)\n.send(updatedClassroom);\nexpect(updateRes.status).to.equal(403);",
              "err": {},
              "uuid": "81bc4d12-f3f4-4b78-a109-9ecc8fdb9d14",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Entity Integration Tests should delete a classroom",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "f535c45c-1763-4c40-a453-74863d1f8ae4",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all classrooms",
              "fullTitle": "Classroom Entity Integration Tests should get all classrooms",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom1 = {\n    name: 'Classroom A',\n    school: schoolId,\n    capacity: 25,\n    resources: ['Chairs', 'Desks']\n};\nconst newClassroom2 = {\n    name: 'Classroom B',\n    school: schoolId,\n    capacity: 40,\n    resources: ['Computers', 'Projector']\n};\nawait request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom1);\nawait request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom2);\nconst getAllRes = await request(app)\n    .get('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getAllRes.status).to.equal(200);\nexpect(getAllRes.body).to.be.an('array');\nexpect(getAllRes.body.length).to.be.at.least(2);\nconst classroomNames = getAllRes.body.map((classroom) => classroom.name);\nexpect(classroomNames).to.include('Classroom A');\nexpect(classroomNames).to.include('Classroom B');",
              "err": {},
              "uuid": "92cffa55-d510-44cc-a543-e354b76c6753",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create a classroom with invalid school",
              "fullTitle": "Classroom Entity Integration Tests should fail to create a classroom with invalid school",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidSchoolId = '605c72ef1532074b4c20d1a1'; \nconst newClassroom = {\n    name: 'Test Classroom',\n    school: invalidSchoolId, \n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\n    \nconst res = await request(app)\n    .put('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\n    \nexpect(res.status).to.equal(404);",
              "err": {},
              "uuid": "fa633d92-57b5-464b-8063-fe3bdd7e55a5",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create a classroom with school missing",
              "fullTitle": "Classroom Entity Integration Tests should fail to create a classroom with school missing",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Test Classroom',\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst res = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "6ad98ebf-e26c-4e6c-a6ea-742040165e09",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get a deleted classroom by invalidClassroomId",
              "fullTitle": "Classroom Entity Integration Tests should fail to get a deleted classroom by invalidClassroomId",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidClassroomId = '605c72ef1532074b4c20d1a1';\nconst delRes = await request(app)\n    .delete(`/api/classrooms/${invalidClassroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(delRes.status).to.equal(404);",
              "err": {},
              "uuid": "8bcc2cdc-c797-4b5d-8218-c496533bb8c7",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get all classrooms with user role",
              "fullTitle": "Classroom Entity Integration Tests should fail to get all classrooms with user role",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getAllRes = await request(app)\n    .get('/api/classrooms')\n    .set('Authorization', `Bearer ${userToken}`);\nexpect(getAllRes.status).to.equal(403);",
              "err": {},
              "uuid": "983e28a8-dd09-4f44-acfa-d1dce3a68e64",
              "parentUUID": "dd96e55d-dd40-4435-bc9f-3653e8de3630",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ad48420-4786-4817-a73b-f62acaf445d1",
            "a422b67e-7c7b-4575-8f5d-c96b9a296c79",
            "3eb9a6b3-ba90-4fd8-86bf-e014213d9932",
            "2715324d-044a-4c08-9eab-fd6b1f47cbec",
            "d4cf6e0a-a924-49ad-aa3f-80f1aabb58ae",
            "bd67e90e-8571-4bc8-9878-2b10b6b13bfc",
            "be02f8d1-970d-44c9-a78e-7b5ce3b93371",
            "81bc4d12-f3f4-4b78-a109-9ecc8fdb9d14",
            "f535c45c-1763-4c40-a453-74863d1f8ae4",
            "92cffa55-d510-44cc-a543-e354b76c6753",
            "fa633d92-57b5-464b-8063-fe3bdd7e55a5",
            "6ad98ebf-e26c-4e6c-a6ea-742040165e09",
            "8bcc2cdc-c797-4b5d-8218-c496533bb8c7",
            "983e28a8-dd09-4f44-acfa-d1dce3a68e64"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 504,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "38402340-8840-433e-9795-845e42d7be4c",
          "title": "School Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/school.integration.test.js",
          "file": "/tests/integration/school.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"School Entity Integration Tests\"",
              "fullTitle": "School Entity Integration Tests \"before all\" hook in \"School Entity Integration Tests\"",
              "timedOut": false,
              "duration": 159,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users and schools collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\n// Create a superadmin user\nconst newUser = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\nuserId = res.body.user._id;\n// Authenticate the superadmin user\nconst credentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst authRes = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = authRes.body.token;",
              "err": {},
              "uuid": "860b5884-d01a-47fc-90e9-5fffe99ebf56",
              "parentUUID": "38402340-8840-433e-9795-845e42d7be4c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new school",
              "fullTitle": "School Entity Integration Tests should create a new school",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: userId\n};\nconst res = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${token}`)\n    .send(newSchool);\nschoolId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newSchool.name);\nexpect(res.body.address).to.equal(newSchool.address);\nexpect(res.body.phone).to.equal(newSchool.phone);\nexpect(res.body.email).to.equal(newSchool.email);\nexpect(res.body.adminId).to.equal(newSchool.adminId);",
              "err": {},
              "uuid": "2ebac483-3c5b-4057-a255-d81520163b55",
              "parentUUID": "38402340-8840-433e-9795-845e42d7be4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a school by ID",
              "fullTitle": "School Entity Integration Tests should get a school by ID",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: userId\n};\n// Get the school by ID\nconst getRes = await request(app)\n    .get(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal(newSchool.name);\nexpect(getRes.body.address).to.equal(newSchool.address);\nexpect(getRes.body.phone).to.equal(newSchool.phone);\nexpect(getRes.body.email).to.equal(newSchool.email);\nexpect(getRes.body.admin._id).to.equal(userId);",
              "err": {},
              "uuid": "354cfe0f-72c7-4d6a-bf65-0904dd6bd9ee",
              "parentUUID": "38402340-8840-433e-9795-845e42d7be4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Entity Integration Tests should update a school",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Update the school's name\nconst updatedSchool = {\n    name: 'Updated School'\n};\nconst updateRes = await request(app)\n    .put(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedSchool);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedSchool.name);",
              "err": {},
              "uuid": "209ffe74-1a88-4139-8614-ade56e746167",
              "parentUUID": "38402340-8840-433e-9795-845e42d7be4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Entity Integration Tests should delete a school",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete the school\nconst deleteRes = await request(app)\n    .delete(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "3ca40103-e35c-44a3-a47c-6c869da5f728",
              "parentUUID": "38402340-8840-433e-9795-845e42d7be4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all schools",
              "fullTitle": "School Entity Integration Tests should get all schools",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create multiple schools\nconst schools = [\n    {\n        name: 'School One',\n        address: 'Address One',\n        phone: '111-111-1111',\n        email: 'schoolone@example.com',\n        website: 'http://schoolone.com',\n        established: '1990-01-01',\n        admin: userId\n    },\n    {\n        name: 'School Two',\n        address: 'Address Two',\n        phone: '222-222-2222',\n        email: 'schooltwo@example.com',\n        website: 'http://schooltwo.com',\n        established: '1995-01-01',\n        admin: userId\n    }\n];\nfor (const school of schools) {\n    await request(app)\n        .post('/api/schools')\n        .set('Authorization', `Bearer ${token}`)\n        .send(school);\n}\n// Get all schools\nconst getAllRes = await request(app)\n    .get('/api/schools')\n    .set('Authorization', `Bearer ${token}`);\nexpect(getAllRes.status).to.equal(200);\nexpect(getAllRes.body).to.be.an('array');\nexpect(getAllRes.body.length).to.be.greaterThan(1);",
              "err": {},
              "uuid": "245e48fa-c3b2-4d5e-95c7-6fe5cf00a005",
              "parentUUID": "38402340-8840-433e-9795-845e42d7be4c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ebac483-3c5b-4057-a255-d81520163b55",
            "354cfe0f-72c7-4d6a-bf65-0904dd6bd9ee",
            "209ffe74-1a88-4139-8614-ade56e746167",
            "3ca40103-e35c-44a3-a47c-6c869da5f728",
            "245e48fa-c3b2-4d5e-95c7-6fe5cf00a005"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 152,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
          "title": "Student Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/student.integration.test.js",
          "file": "/tests/integration/student.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"before all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 380,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, classrooms, and students collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\nawait studentModel.deleteMany({});\n// Create a superadmin user\nconst newSuperadmin = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst superadminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSuperadmin);\nsuperadminId = superadminRes.body.user._id;\n// Authenticate the superadmin user\nconst superadminCredentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst superadminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(superadminCredentials);\nsuperadminToken = superadminAuthRes.body.token;\n// Create a schooladmin user\nconst newSchooladmin = {\n    username: 'School Admin',\n    email: 'schooladmin@example.com',\n    password: 'password123',\n    role: 'schooladmin'\n};\nconst schooladminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSchooladmin);\nschooladminId = schooladminRes.body.user._id;\n// Authenticate the schooladmin user\nconst schooladminCredentials = {\n    email: 'schooladmin@example.com',\n    password: 'password123'\n};\nconst schooladminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(schooladminCredentials);\nschooladminToken = schooladminAuthRes.body.token;\n// Create a school with the token of superadmin\nconst newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newSchool);\nschoolId = schoolRes.body._id;\n// Update schooladmin user to assign this school to this user\nconst updatedSchooladmin = {\n    school: schoolId\n};\nconst updateSchooladminRes = await request(app)\n    .put(`/api/users/${schooladminId}`)\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(updatedSchooladmin);\nexpect(updateSchooladminRes.status).to.equal(200);\nexpect(updateSchooladminRes.body.school).to.equal(schoolId);\n// Create a classroom with schooladmin user with capacity as 1\nconst newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 1,\n    resources: ['Projector', 'Whiteboard']\n};\nconst classroomRes = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nclassroomId = classroomRes.body._id;",
              "err": {},
              "uuid": "fcd0542b-8f45-4918-8dcb-77729963af40",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"after all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, classrooms, and students collections after all tests\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\nawait studentModel.deleteMany({});",
              "err": {},
              "uuid": "f82a7553-78bf-4f14-96c1-f242ceb7fcc8",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail to update a student with an invalid classroom",
              "fullTitle": "Student Entity Integration Tests should fail to update a student with an invalid classroom",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedStudent = {\n    classroom: 'invalidClassroomId'\n};\nconst updateRes = await request(app)\n    .put(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedStudent);\nexpect(updateRes.status).to.equal(400);",
              "err": {},
              "uuid": "732ae3cc-b8c0-4d7f-837a-af91c6e9fdd7",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update a student with access denied",
              "fullTitle": "Student Entity Integration Tests should fail to update a student with access denied",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Another Test School',\n    address: '456 Another St',\n    phone: '987-654-3210',\n    email: 'anothertestschool@example.com',\n    website: 'http://anothertestschool.com',\n    established: '2005-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newSchool);\nconst anotherSchoolId = schoolRes.body._id;\nconst newClassroom = {\n    name: 'Another Test Classroom',\n    school: anotherSchoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst classroomRes = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newClassroom);\nconst anotherClassroomId = classroomRes.body._id;\nconst updatedStudent = {\n    classroom: anotherClassroomId\n};\nconst updateRes = await request(app)\n    .put(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedStudent);\nexpect(updateRes.status).to.equal(400);",
              "err": {},
              "uuid": "bc090097-a34c-4cf3-883c-ad8cad7e2c0b",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update a student when classroom capacity is exceeded",
              "fullTitle": "Student Entity Integration Tests should fail to update a student when classroom capacity is exceeded",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create a classroom with capacity 1\nconst newClassroom = {\n    name: 'Small Classroom',\n    school: schoolId,\n    capacity: 1,\n    resources: ['Projector']\n};\nconst classroomRes = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nconst smallClassroomId = classroomRes.body._id;\n// Create a student in the small classroom\nconst newStudent = {\n    name: 'Another Student',\n    age: 16,\n    classroom: smallClassroomId\n};\nawait request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\n// Try to update the original student to the small classroom\nconst updatedStudent = {\n    classroom: smallClassroomId\n};\nconst updateRes = await request(app)\n    .put(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedStudent);\nexpect(updateRes.status).to.equal(400);",
              "err": {},
              "uuid": "66f1dbe3-1322-46ed-b53e-44cbd1b11b19",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a student and assign it to the classroom",
              "fullTitle": "Student Entity Integration Tests should create a student and assign it to the classroom",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Test Student',\n    email: 'teststudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nstudentId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "d534bc04-c2a3-490d-abbb-59480764815a",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create another student in the same classroom due to capacity",
              "fullTitle": "Student Entity Integration Tests should fail to create another student in the same classroom due to capacity",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "8ddfbffe-01e4-4655-9d9c-f92b356183c1",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update classroom capacity to 30",
              "fullTitle": "Student Entity Integration Tests should update classroom capacity to 30",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    capacity: 30\n};\nconst updateRes = await request(app)\n    .put(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedClassroom);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.capacity).to.equal(updatedClassroom.capacity);",
              "err": {},
              "uuid": "23c53d81-fffa-4d75-8a8e-1d805c70385e",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create another student and assign it to the classroom successfully",
              "fullTitle": "Student Entity Integration Tests should create another student and assign it to the classroom successfully",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "a58e5842-ecea-4cab-8f6e-48d22bdab1f5",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student information",
              "fullTitle": "Student Entity Integration Tests should update a student information",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedStudent = {\n    name: 'Updated Student'\n};\nconst updateRes = await request(app)\n    .put(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedStudent);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedStudent.name);",
              "err": {},
              "uuid": "4e1aa03f-1303-49eb-b61a-fa9dc77f7339",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a student by ID",
              "fullTitle": "Student Entity Integration Tests should get a student by ID",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Updated Student');\nexpect(getRes.body.email).to.equal('teststudent@example.com');\nexpect(getRes.body.classroom._id).to.equal(classroomId);\nexpect(getRes.body.age).to.equal(20);\nexpect(getRes.body.address).to.equal('123 Test St');",
              "err": {},
              "uuid": "e4e7e71e-8e59-4a8f-adb3-4bb12ba58d25",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get students by classroom",
              "fullTitle": "Student Entity Integration Tests should get students by classroom",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/students/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1);\nexpect(getRes.body[0].classroom._id).to.equal(classroomId);",
              "err": {},
              "uuid": "2b39fd8e-0d20-4a8b-8ef5-615e1c43534e",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all students",
              "fullTitle": "Student Entity Integration Tests should get all students",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`);\n    \nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1); \nexpect(getRes.body[0]).to.have.property('_id');\nexpect(getRes.body[0]).to.have.property('name');\nexpect(getRes.body[0]).to.have.property('email');\nexpect(getRes.body[0].classroom._id).to.equal(classroomId);",
              "err": {},
              "uuid": "e234c742-6a61-4bdd-8a5f-e74c3ce4d662",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Entity Integration Tests should delete a student",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "a8d97dfd-dc29-428c-bf10-43b12e782596",
              "parentUUID": "308c3d07-5e6d-440f-b047-0ffe2937a1ba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "732ae3cc-b8c0-4d7f-837a-af91c6e9fdd7",
            "bc090097-a34c-4cf3-883c-ad8cad7e2c0b",
            "66f1dbe3-1322-46ed-b53e-44cbd1b11b19",
            "d534bc04-c2a3-490d-abbb-59480764815a",
            "8ddfbffe-01e4-4655-9d9c-f92b356183c1",
            "23c53d81-fffa-4d75-8a8e-1d805c70385e",
            "a58e5842-ecea-4cab-8f6e-48d22bdab1f5",
            "4e1aa03f-1303-49eb-b61a-fa9dc77f7339",
            "e4e7e71e-8e59-4a8f-adb3-4bb12ba58d25",
            "2b39fd8e-0d20-4a8b-8ef5-615e1c43534e",
            "e234c742-6a61-4bdd-8a5f-e74c3ce4d662",
            "a8d97dfd-dc29-428c-bf10-43b12e782596"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 451,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c50d9ef7-cdb8-4ad9-9b54-28f893211400",
          "title": "User Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/user.integration.test.js",
          "file": "/tests/integration/user.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Entity Integration Tests\"",
              "fullTitle": "User Entity Integration Tests \"before all\" hook in \"User Entity Integration Tests\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await userModel.deleteMany({});",
              "err": {},
              "uuid": "42ddf9ab-5ba1-4680-8814-8d601c54f829",
              "parentUUID": "c50d9ef7-cdb8-4ad9-9b54-28f893211400",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User Entity Integration Tests should create a new user",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n    username: 'Test User',\n    email: 'testuser@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\n\nuserId = res.body.user._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('user');\nexpect(res.body.user.username).to.equal(newUser.username);\nexpect(res.body.user.email).to.equal(newUser.email);",
              "err": {},
              "uuid": "64fcbfec-6650-4c9b-bdd4-dbb246949fdb",
              "parentUUID": "c50d9ef7-cdb8-4ad9-9b54-28f893211400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate a user",
              "fullTitle": "User Entity Integration Tests should authenticate a user",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@example.com',\n    password: 'password123'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = res.body.token;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
              "err": {},
              "uuid": "e7ab64d4-8e8f-419f-8d7c-8275f59374b4",
              "parentUUID": "c50d9ef7-cdb8-4ad9-9b54-28f893211400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid credentials",
              "fullTitle": "User Entity Integration Tests should return 400 for invalid credentials",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@example.com',\n    password: 'wrongpassword'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "01c52ad9-2dd9-4f95-8f4a-bc0dd1f93ba0",
              "parentUUID": "c50d9ef7-cdb8-4ad9-9b54-28f893211400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Entity Integration Tests should update a user",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n    username: 'Updated User'\n};\nconst updateRes = await request(app)\n    .put(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedUser);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.username).to.equal(updatedUser.username);",
              "err": {},
              "uuid": "e1abfd71-2287-4ff0-be3c-9652ed873915",
              "parentUUID": "c50d9ef7-cdb8-4ad9-9b54-28f893211400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a user by ID",
              "fullTitle": "User Entity Integration Tests should get a user by ID",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`);\n    \nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.have.property('_id');\nexpect(getRes.body._id).to.equal(userId);\nexpect(getRes.body.username).to.equal('Updated User');\nexpect(getRes.body.email).to.equal('testuser@example.com');",
              "err": {},
              "uuid": "cd57f878-69e4-48e5-8823-175d052e15bf",
              "parentUUID": "c50d9ef7-cdb8-4ad9-9b54-28f893211400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all users",
              "fullTitle": "User Entity Integration Tests should get all users",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get('/api/users')\n    .set('Authorization', `Bearer ${token}`);\n    \nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1); \nexpect(getRes.body[0]).to.have.property('_id');\nexpect(getRes.body[0]).to.have.property('username');\nexpect(getRes.body[0]).to.have.property('email');",
              "err": {},
              "uuid": "8270c35d-64b3-4d17-8823-69a10e10a0d6",
              "parentUUID": "c50d9ef7-cdb8-4ad9-9b54-28f893211400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Entity Integration Tests should delete a user",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`);\n\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "aaa74ce8-3b2f-4275-bb07-60546a051971",
              "parentUUID": "c50d9ef7-cdb8-4ad9-9b54-28f893211400",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64fcbfec-6650-4c9b-bdd4-dbb246949fdb",
            "e7ab64d4-8e8f-419f-8d7c-8275f59374b4",
            "01c52ad9-2dd9-4f95-8f4a-bc0dd1f93ba0",
            "e1abfd71-2287-4ff0-be3c-9652ed873915",
            "cd57f878-69e4-48e5-8823-175d052e15bf",
            "8270c35d-64b3-4d17-8823-69a10e10a0d6",
            "aaa74ce8-3b2f-4275-bb07-60546a051971"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 278,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "223d12c8-3db8-4829-8b62-fc22bca55ccb",
          "title": "Classroom Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/classroom.test.js",
          "file": "/tests/unit/classroom.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"before each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'findById');",
              "err": {},
              "uuid": "522a51a5-de93-46b0-83d1-ffb25bb8bc5d",
              "parentUUID": "223d12c8-3db8-4829-8b62-fc22bca55ccb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"after each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.restore();",
              "err": {},
              "uuid": "f627f22c-8a49-4844-8fcb-2130469d4b08",
              "parentUUID": "223d12c8-3db8-4829-8b62-fc22bca55ccb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a classroom by ID",
              "fullTitle": "Classroom Model Unit Tests should find a classroom by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nclassroomStub.resolves(mockClassroom);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.deep.equal(mockClassroom);",
              "err": {},
              "uuid": "5ebe346e-d725-45af-9d72-e5080ad7d0a4",
              "parentUUID": "223d12c8-3db8-4829-8b62-fc22bca55ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if classroom not found",
              "fullTitle": "Classroom Model Unit Tests should return null if classroom not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.resolves(null);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.be.null;",
              "err": {},
              "uuid": "933507b9-842f-4df7-894e-d309daeba317",
              "parentUUID": "223d12c8-3db8-4829-8b62-fc22bca55ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new classroom",
              "fullTitle": "Classroom Model Unit Tests should create a new classroom",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst createStub = sinon.stub(classroomModel.prototype, 'save').resolves(mockClassroom);\nconst newClassroom = new classroomModel(mockClassroom);\nconst savedClassroom = await newClassroom.save();\nexpect(savedClassroom).to.deep.equal(mockClassroom);\ncreateStub.restore();",
              "err": {},
              "uuid": "2405de34-b0a8-401e-8684-36ab988db3ff",
              "parentUUID": "223d12c8-3db8-4829-8b62-fc22bca55ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom",
              "fullTitle": "Classroom Model Unit Tests should update a classroom",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Updated Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst updateStub = sinon.stub(classroomModel, 'findByIdAndUpdate').resolves(mockClassroom);\nconst updatedClassroom = await classroomModel.findByIdAndUpdate('123', { name: 'Updated Classroom' }, { new: true });\nexpect(updatedClassroom).to.deep.equal(mockClassroom);\nupdateStub.restore();",
              "err": {},
              "uuid": "4348f743-5ee4-44ce-aaa5-87d21011ba91",
              "parentUUID": "223d12c8-3db8-4829-8b62-fc22bca55ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Model Unit Tests should delete a classroom",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(classroomModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedClassroom = await classroomModel.findByIdAndDelete('123');\nexpect(deletedClassroom).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "bcf97555-e2f2-48a5-af52-21d129edef55",
              "parentUUID": "223d12c8-3db8-4829-8b62-fc22bca55ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all classrooms",
              "fullTitle": "Classroom Model Unit Tests should get all classrooms",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'find');\nconst mockClassrooms = [\n    { id: '123', name: 'Classroom 1', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] },\n    { id: '124', name: 'Classroom 2', school: '456', capacity: 25, resources: ['Projector'] }\n];\nclassroomStub.resolves(mockClassrooms);\nconst classrooms = await classroomModel.find();\nexpect(classrooms).to.deep.equal(mockClassrooms);",
              "err": {},
              "uuid": "466ae906-f79e-4502-8183-b1e6756b72ca",
              "parentUUID": "223d12c8-3db8-4829-8b62-fc22bca55ccb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ebe346e-d725-45af-9d72-e5080ad7d0a4",
            "933507b9-842f-4df7-894e-d309daeba317",
            "2405de34-b0a8-401e-8684-36ab988db3ff",
            "4348f743-5ee4-44ce-aaa5-87d21011ba91",
            "bcf97555-e2f2-48a5-af52-21d129edef55",
            "466ae906-f79e-4502-8183-b1e6756b72ca"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "44fce984-3ac9-4563-afec-eea84599c9f7",
          "title": "School Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/school.test.js",
          "file": "/tests/unit/school.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"before each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub = sinon.stub(schoolModel, 'findById');",
              "err": {},
              "uuid": "6a665ef8-a1eb-4bf1-a58d-34cda39b3d80",
              "parentUUID": "44fce984-3ac9-4563-afec-eea84599c9f7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"after each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.restore();",
              "err": {},
              "uuid": "73e3e1bb-78b0-40ef-bdb0-d23041dd9f94",
              "parentUUID": "44fce984-3ac9-4563-afec-eea84599c9f7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a school by ID",
              "fullTitle": "School Model Unit Tests should find a school by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nschoolStub.resolves(mockSchool);\nconst school = await schoolModel.findById('123');\nexpect(school).to.deep.equal(mockSchool);",
              "err": {},
              "uuid": "8250fc3a-5207-488a-8d93-1e096b8e745d",
              "parentUUID": "44fce984-3ac9-4563-afec-eea84599c9f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if school not found",
              "fullTitle": "School Model Unit Tests should return null if school not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.resolves(null);\nconst school = await schoolModel.findById('123');\nexpect(school).to.be.null;",
              "err": {},
              "uuid": "2e27b80b-9381-4e24-ab3e-6f906b1d9f7c",
              "parentUUID": "44fce984-3ac9-4563-afec-eea84599c9f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new school",
              "fullTitle": "School Model Unit Tests should create a new school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nconst createStub = sinon.stub(schoolModel.prototype, 'save').resolves(mockSchool);\nconst newSchool = new schoolModel(mockSchool);\nconst savedSchool = await newSchool.save();\nexpect(savedSchool).to.deep.equal(mockSchool);\ncreateStub.restore();",
              "err": {},
              "uuid": "c38945a9-91e0-419a-b0d1-145f5da4bde6",
              "parentUUID": "44fce984-3ac9-4563-afec-eea84599c9f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Model Unit Tests should update a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Updated School' };\nconst updateStub = sinon.stub(schoolModel, 'findByIdAndUpdate').resolves(mockSchool);\nconst updatedSchool = await schoolModel.findByIdAndUpdate('123', { name: 'Updated School' }, { new: true });\nexpect(updatedSchool).to.deep.equal(mockSchool);\nupdateStub.restore();",
              "err": {},
              "uuid": "058d353d-4327-48c2-bc53-79b07042d380",
              "parentUUID": "44fce984-3ac9-4563-afec-eea84599c9f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Model Unit Tests should delete a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(schoolModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedSchool = await schoolModel.findByIdAndDelete('123');\nexpect(deletedSchool).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "b7dc98ba-cfc9-449f-a6c5-3c1c1308b7bd",
              "parentUUID": "44fce984-3ac9-4563-afec-eea84599c9f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8250fc3a-5207-488a-8d93-1e096b8e745d",
            "2e27b80b-9381-4e24-ab3e-6f906b1d9f7c",
            "c38945a9-91e0-419a-b0d1-145f5da4bde6",
            "058d353d-4327-48c2-bc53-79b07042d380",
            "b7dc98ba-cfc9-449f-a6c5-3c1c1308b7bd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "08399eda-fc18-4b6b-9831-70c996045636",
          "title": "Student Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/student.test.js",
          "file": "/tests/unit/student.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"before each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub = sinon.stub(studentModel, 'findById');",
              "err": {},
              "uuid": "4701ee30-75b6-49de-a017-bb7bab0fed25",
              "parentUUID": "08399eda-fc18-4b6b-9831-70c996045636",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"after each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.restore();",
              "err": {},
              "uuid": "e40d676f-4b47-4bc2-8d85-5fc0350b923c",
              "parentUUID": "08399eda-fc18-4b6b-9831-70c996045636",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a student by ID",
              "fullTitle": "Student Model Unit Tests should find a student by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nstudentStub.resolves(mockStudent);\nconst student = await studentModel.findById('123');\nexpect(student).to.deep.equal(mockStudent);",
              "err": {},
              "uuid": "125716a6-1ac5-45cb-9e95-0bed063e3ec4",
              "parentUUID": "08399eda-fc18-4b6b-9831-70c996045636",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if student not found",
              "fullTitle": "Student Model Unit Tests should return null if student not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.resolves(null);\nconst student = await studentModel.findById('123');\nexpect(student).to.be.null;",
              "err": {},
              "uuid": "f40e8547-0e3d-4602-b233-025e9d55122e",
              "parentUUID": "08399eda-fc18-4b6b-9831-70c996045636",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new student",
              "fullTitle": "Student Model Unit Tests should create a new student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nconst createStub = sinon.stub(studentModel.prototype, 'save').resolves(mockStudent);\nconst newStudent = new studentModel(mockStudent);\nconst savedStudent = await newStudent.save();\nexpect(savedStudent).to.deep.equal(mockStudent);\ncreateStub.restore();",
              "err": {},
              "uuid": "95339d3a-6984-4912-b288-b877f80bec2d",
              "parentUUID": "08399eda-fc18-4b6b-9831-70c996045636",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student",
              "fullTitle": "Student Model Unit Tests should update a student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Updated Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nconst updateStub = sinon.stub(studentModel, 'findByIdAndUpdate').resolves(mockStudent);\nconst updatedStudent = await studentModel.findByIdAndUpdate('123', { name: 'Updated Student' }, { new: true });\nexpect(updatedStudent).to.deep.equal(mockStudent);\nupdateStub.restore();",
              "err": {},
              "uuid": "3011e839-ce60-413c-a096-dc69e38f4a8d",
              "parentUUID": "08399eda-fc18-4b6b-9831-70c996045636",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Model Unit Tests should delete a student",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(studentModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedStudent = await studentModel.findByIdAndDelete('123');\nexpect(deletedStudent).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "b5a40307-0c55-49f4-a870-e805a5d51323",
              "parentUUID": "08399eda-fc18-4b6b-9831-70c996045636",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "125716a6-1ac5-45cb-9e95-0bed063e3ec4",
            "f40e8547-0e3d-4602-b233-025e9d55122e",
            "95339d3a-6984-4912-b288-b877f80bec2d",
            "3011e839-ce60-413c-a096-dc69e38f4a8d",
            "b5a40307-0c55-49f4-a870-e805a5d51323"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cc03b7b2-d47e-4fd6-88d6-778134cd2128",
          "title": "User Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/user.test.js",
          "file": "/tests/unit/user.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"before each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub = sinon.stub(userModel, 'findById');",
              "err": {},
              "uuid": "64252dd6-214e-4e74-b2eb-895fc06af703",
              "parentUUID": "cc03b7b2-d47e-4fd6-88d6-778134cd2128",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"after each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.restore();",
              "err": {},
              "uuid": "52a9a898-5a44-4185-b614-c11c6332506d",
              "parentUUID": "cc03b7b2-d47e-4fd6-88d6-778134cd2128",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a user by ID",
              "fullTitle": "User Model Unit Tests should find a user by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User' };\nuserStub.resolves(mockUser);\nconst user = await userModel.findById('123');\nexpect(user).to.deep.equal(mockUser);",
              "err": {},
              "uuid": "d961c274-7b35-4726-ba75-d5d86384d9cd",
              "parentUUID": "cc03b7b2-d47e-4fd6-88d6-778134cd2128",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if user not found",
              "fullTitle": "User Model Unit Tests should return null if user not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.resolves(null);\nconst user = await userModel.findById('123');\nexpect(user).to.be.null;",
              "err": {},
              "uuid": "1a11413e-e9b1-47d5-96b4-88f339078024",
              "parentUUID": "cc03b7b2-d47e-4fd6-88d6-778134cd2128",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user",
              "fullTitle": "User Model Unit Tests should create a new user",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@example.com', password: 'password123' };\nconst createStub = sinon.stub(userModel.prototype, 'save').resolves(mockUser);\nconst newUser = new userModel(mockUser);\nconst savedUser = await newUser.save();\nexpect(savedUser).to.deep.equal(mockUser);\ncreateStub.restore();",
              "err": {},
              "uuid": "8afb794a-47fc-418a-920f-8f5244a0666d",
              "parentUUID": "cc03b7b2-d47e-4fd6-88d6-778134cd2128",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find a user by email",
              "fullTitle": "User Model Unit Tests should find a user by email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@example.com' };\nconst findStub = sinon.stub(userModel, 'findOne').resolves(mockUser);\nconst user = await userModel.findOne({ email: 'testuser@example.com' });\nexpect(user).to.deep.equal(mockUser);\nfindStub.restore();",
              "err": {},
              "uuid": "949881c1-7c1b-4bb9-b4da-b616046e1bd3",
              "parentUUID": "cc03b7b2-d47e-4fd6-88d6-778134cd2128",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Model Unit Tests should update a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Updated User', email: 'testuser@example.com' };\nconst updateStub = sinon.stub(userModel, 'findByIdAndUpdate').resolves(mockUser);\nconst updatedUser = await userModel.findByIdAndUpdate('123', { name: 'Updated User' }, { new: true });\nexpect(updatedUser).to.deep.equal(mockUser);\nupdateStub.restore();",
              "err": {},
              "uuid": "611c772e-bf92-46dd-ad44-a215317361a5",
              "parentUUID": "cc03b7b2-d47e-4fd6-88d6-778134cd2128",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Model Unit Tests should delete a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(userModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedUser = await userModel.findByIdAndDelete('123');\nexpect(deletedUser).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "aab685d5-aa62-448b-bf3c-fbe7f66deb14",
              "parentUUID": "cc03b7b2-d47e-4fd6-88d6-778134cd2128",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d961c274-7b35-4726-ba75-d5d86384d9cd",
            "1a11413e-e9b1-47d5-96b4-88f339078024",
            "8afb794a-47fc-418a-920f-8f5244a0666d",
            "949881c1-7c1b-4bb9-b4da-b616046e1bd3",
            "611c772e-bf92-46dd-ad44-a215317361a5",
            "aab685d5-aa62-448b-bf3c-fbe7f66deb14"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}