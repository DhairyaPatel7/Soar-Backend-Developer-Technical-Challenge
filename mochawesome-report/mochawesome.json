{
  "stats": {
    "suites": 8,
    "tests": 52,
    "passes": 52,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-19T16:25:45.919Z",
    "end": "2024-12-19T16:25:46.944Z",
    "duration": 1025,
    "testsRegistered": 52,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "05365447-6104-44c5-8a22-44fbe94589ab",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6387a449-7f44-4310-bca9-0b6f57eda41c",
          "title": "Classroom Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/classroom.integration.test.js",
          "file": "/tests/integration/classroom.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"before all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 285,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, and classrooms collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\n// Create a superadmin user\nconst newSuperadmin = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst superadminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSuperadmin);\nsuperadminId = superadminRes.body.user._id;\n// Authenticate the superadmin user\nconst superadminCredentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst superadminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(superadminCredentials);\nsuperadminToken = superadminAuthRes.body.token;\n// Create a schooladmin user\nconst newSchooladmin = {\n    username: 'School Admin',\n    email: 'schooladmin@example.com',\n    password: 'password123',\n    role: 'schooladmin'\n};\nconst schooladminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSchooladmin);\nschooladminId = schooladminRes.body.user._id;\n// Authenticate the schooladmin user\nconst schooladminCredentials = {\n    email: 'schooladmin@example.com',\n    password: 'password123'\n};\nconst schooladminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(schooladminCredentials);\nschooladminToken = schooladminAuthRes.body.token;\n// Create a school with the token of superadmin\nconst newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newSchool);\n\nschoolId = schoolRes.body._id;",
              "err": {},
              "uuid": "257a4318-8051-4d18-9444-d05167cbe942",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"after all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, and classrooms collections after all tests\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});",
              "err": {},
              "uuid": "4f3eae74-4428-4d98-a3ab-86b90fb06268",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail to create a classroom with schooladmin user without school",
              "fullTitle": "Classroom Entity Integration Tests should fail to create a classroom with schooladmin user without school",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst res = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "d2d90222-ce37-493e-a259-30092bdf73c3",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update schooladmin user to add school",
              "fullTitle": "Classroom Entity Integration Tests should update schooladmin user to add school",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedSchooladmin = {\n    school: schoolId\n};\nconst updateRes = await request(app)\n    .put(`/api/users/${schooladminId}`)\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(updatedSchooladmin);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.school).to.equal(schoolId);",
              "err": {},
              "uuid": "3c86fa69-865d-4f1b-bad8-777014dd51a5",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new classroom with schooladmin user",
              "fullTitle": "Classroom Entity Integration Tests should create a new classroom with schooladmin user",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst res = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nclassroomId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newClassroom.name);\nexpect(res.body.school).to.equal(newClassroom.school);\nexpect(res.body.capacity).to.equal(newClassroom.capacity);\nexpect(res.body.resources).to.deep.equal(newClassroom.resources);",
              "err": {},
              "uuid": "e0cf7bde-6a31-493b-81d2-3c46090376d9",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom capacity",
              "fullTitle": "Classroom Entity Integration Tests should update a classroom capacity",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    capacity: 35\n};\nconst updateRes = await request(app)\n    .put(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedClassroom);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.capacity).to.equal(updatedClassroom.capacity);",
              "err": {},
              "uuid": "5603eaf9-4c59-484c-bca1-2a67e4088db3",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a classroom by ID",
              "fullTitle": "Classroom Entity Integration Tests should get a classroom by ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Test Classroom');\nexpect(getRes.body.school._id).to.equal(schoolId);\nexpect(getRes.body.capacity).to.equal(35);\nexpect(getRes.body.resources).to.deep.equal(['Projector', 'Whiteboard']);",
              "err": {},
              "uuid": "3e807620-72c7-4e12-9190-f1a3ff42fe8d",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Entity Integration Tests should delete a classroom",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "ad71ec1d-effa-4da1-b2e6-116b48fbee79",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all classrooms",
              "fullTitle": "Classroom Entity Integration Tests should get all classrooms",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom1 = {\n    name: 'Classroom A',\n    school: schoolId,\n    capacity: 25,\n    resources: ['Chairs', 'Desks']\n};\nconst newClassroom2 = {\n    name: 'Classroom B',\n    school: schoolId,\n    capacity: 40,\n    resources: ['Computers', 'Projector']\n};\nawait request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom1);\nawait request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom2);\nconst getAllRes = await request(app)\n    .get('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getAllRes.status).to.equal(200);\nexpect(getAllRes.body).to.be.an('array');\nexpect(getAllRes.body.length).to.be.at.least(2);\nconst classroomNames = getAllRes.body.map((classroom) => classroom.name);\nexpect(classroomNames).to.include('Classroom A');\nexpect(classroomNames).to.include('Classroom B');",
              "err": {},
              "uuid": "f6830519-89fe-49ef-a2f3-b009fa956d7d",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create a classroom with invalid school",
              "fullTitle": "Classroom Entity Integration Tests should fail to create a classroom with invalid school",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidSchoolId = '605c72ef1532074b4c20d1a1'; \nconst newClassroom = {\n    name: 'Test Classroom',\n    school: invalidSchoolId, \n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\n    \nconst res = await request(app)\n    .put('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\n    \nexpect(res.status).to.equal(404);",
              "err": {},
              "uuid": "317463ec-81a6-4817-a81e-7c55903dd55f",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get a deleted classroom by ID",
              "fullTitle": "Classroom Entity Integration Tests should fail to get a deleted classroom by ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(400);",
              "err": {},
              "uuid": "d94b3746-e0bc-4f7f-8324-3d49d921264c",
              "parentUUID": "6387a449-7f44-4310-bca9-0b6f57eda41c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2d90222-ce37-493e-a259-30092bdf73c3",
            "3c86fa69-865d-4f1b-bad8-777014dd51a5",
            "e0cf7bde-6a31-493b-81d2-3c46090376d9",
            "5603eaf9-4c59-484c-bca1-2a67e4088db3",
            "3e807620-72c7-4e12-9190-f1a3ff42fe8d",
            "ad71ec1d-effa-4da1-b2e6-116b48fbee79",
            "f6830519-89fe-49ef-a2f3-b009fa956d7d",
            "317463ec-81a6-4817-a81e-7c55903dd55f",
            "d94b3746-e0bc-4f7f-8324-3d49d921264c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 68,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e7ff4e01-1e84-47c1-b972-0833b748f7f0",
          "title": "School Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/school.integration.test.js",
          "file": "/tests/integration/school.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"School Entity Integration Tests\"",
              "fullTitle": "School Entity Integration Tests \"before all\" hook in \"School Entity Integration Tests\"",
              "timedOut": false,
              "duration": 119,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users and schools collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\n// Create a superadmin user\nconst newUser = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\nuserId = res.body.user._id;\n// Authenticate the superadmin user\nconst credentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst authRes = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = authRes.body.token;",
              "err": {},
              "uuid": "279097ff-f6da-4727-be9f-cd5bebfe12bb",
              "parentUUID": "e7ff4e01-1e84-47c1-b972-0833b748f7f0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new school",
              "fullTitle": "School Entity Integration Tests should create a new school",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: userId\n};\nconst res = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${token}`)\n    .send(newSchool);\nschoolId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newSchool.name);\nexpect(res.body.address).to.equal(newSchool.address);\nexpect(res.body.phone).to.equal(newSchool.phone);\nexpect(res.body.email).to.equal(newSchool.email);\nexpect(res.body.adminId).to.equal(newSchool.adminId);",
              "err": {},
              "uuid": "02f398b4-783d-4764-9ca1-9728b3e69df6",
              "parentUUID": "e7ff4e01-1e84-47c1-b972-0833b748f7f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a school by ID",
              "fullTitle": "School Entity Integration Tests should get a school by ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: userId\n};\n// Get the school by ID\nconst getRes = await request(app)\n    .get(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal(newSchool.name);\nexpect(getRes.body.address).to.equal(newSchool.address);\nexpect(getRes.body.phone).to.equal(newSchool.phone);\nexpect(getRes.body.email).to.equal(newSchool.email);\nexpect(getRes.body.admin._id).to.equal(userId);",
              "err": {},
              "uuid": "113c5a21-4037-4357-83c1-b9702e6ea5d2",
              "parentUUID": "e7ff4e01-1e84-47c1-b972-0833b748f7f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Entity Integration Tests should update a school",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Update the school's name\nconst updatedSchool = {\n    name: 'Updated School'\n};\nconst updateRes = await request(app)\n    .put(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedSchool);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedSchool.name);",
              "err": {},
              "uuid": "d4dd5099-f283-44a2-9d66-eb0b030a2fec",
              "parentUUID": "e7ff4e01-1e84-47c1-b972-0833b748f7f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Entity Integration Tests should delete a school",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete the school\nconst deleteRes = await request(app)\n    .delete(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "b5900e80-785b-4b64-aa9d-6a0e754f2002",
              "parentUUID": "e7ff4e01-1e84-47c1-b972-0833b748f7f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all schools",
              "fullTitle": "School Entity Integration Tests should get all schools",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create multiple schools\nconst schools = [\n    {\n        name: 'School One',\n        address: 'Address One',\n        phone: '111-111-1111',\n        email: 'schoolone@example.com',\n        website: 'http://schoolone.com',\n        established: '1990-01-01',\n        admin: userId\n    },\n    {\n        name: 'School Two',\n        address: 'Address Two',\n        phone: '222-222-2222',\n        email: 'schooltwo@example.com',\n        website: 'http://schooltwo.com',\n        established: '1995-01-01',\n        admin: userId\n    }\n];\nfor (const school of schools) {\n    await request(app)\n        .post('/api/schools')\n        .set('Authorization', `Bearer ${token}`)\n        .send(school);\n}\n// Get all schools\nconst getAllRes = await request(app)\n    .get('/api/schools')\n    .set('Authorization', `Bearer ${token}`);\nexpect(getAllRes.status).to.equal(200);\nexpect(getAllRes.body).to.be.an('array');\nexpect(getAllRes.body.length).to.be.greaterThan(1);",
              "err": {},
              "uuid": "0d7adf3e-2d6a-44c4-af65-2fbc649e335c",
              "parentUUID": "e7ff4e01-1e84-47c1-b972-0833b748f7f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02f398b4-783d-4764-9ca1-9728b3e69df6",
            "113c5a21-4037-4357-83c1-b9702e6ea5d2",
            "d4dd5099-f283-44a2-9d66-eb0b030a2fec",
            "b5900e80-785b-4b64-aa9d-6a0e754f2002",
            "0d7adf3e-2d6a-44c4-af65-2fbc649e335c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
          "title": "Student Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/student.integration.test.js",
          "file": "/tests/integration/student.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"before all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 251,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, classrooms, and students collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\nawait studentModel.deleteMany({});\n// Create a superadmin user\nconst newSuperadmin = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst superadminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSuperadmin);\nsuperadminId = superadminRes.body.user._id;\n// Authenticate the superadmin user\nconst superadminCredentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst superadminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(superadminCredentials);\nsuperadminToken = superadminAuthRes.body.token;\n// Create a schooladmin user\nconst newSchooladmin = {\n    username: 'School Admin',\n    email: 'schooladmin@example.com',\n    password: 'password123',\n    role: 'schooladmin'\n};\nconst schooladminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSchooladmin);\nschooladminId = schooladminRes.body.user._id;\n// Authenticate the schooladmin user\nconst schooladminCredentials = {\n    email: 'schooladmin@example.com',\n    password: 'password123'\n};\nconst schooladminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(schooladminCredentials);\nschooladminToken = schooladminAuthRes.body.token;\n// Create a school with the token of superadmin\nconst newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newSchool);\nschoolId = schoolRes.body._id;\n// Update schooladmin user to assign this school to this user\nconst updatedSchooladmin = {\n    school: schoolId\n};\nconst updateSchooladminRes = await request(app)\n    .put(`/api/users/${schooladminId}`)\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(updatedSchooladmin);\nexpect(updateSchooladminRes.status).to.equal(200);\nexpect(updateSchooladminRes.body.school).to.equal(schoolId);\n// Create a classroom with schooladmin user with capacity as 1\nconst newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 1,\n    resources: ['Projector', 'Whiteboard']\n};\nconst classroomRes = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nclassroomId = classroomRes.body._id;",
              "err": {},
              "uuid": "323f67c4-afe2-4dcd-8b7a-63ed3e31c830",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"after all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, classrooms, and students collections after all tests\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\nawait studentModel.deleteMany({});",
              "err": {},
              "uuid": "b81604b7-b2fa-45b3-8891-212dcd05beae",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a student and assign it to the classroom",
              "fullTitle": "Student Entity Integration Tests should create a student and assign it to the classroom",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Test Student',\n    email: 'teststudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nstudentId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "7b2b721e-b939-477b-b585-01e23b8930d8",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create another student in the same classroom due to capacity",
              "fullTitle": "Student Entity Integration Tests should fail to create another student in the same classroom due to capacity",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "6e18f2f9-3834-4212-873d-e6b5c9866e4f",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update classroom capacity to 30",
              "fullTitle": "Student Entity Integration Tests should update classroom capacity to 30",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    capacity: 30\n};\nconst updateRes = await request(app)\n    .put(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedClassroom);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.capacity).to.equal(updatedClassroom.capacity);",
              "err": {},
              "uuid": "e86281d1-44e3-4d6c-8b09-9d186ed4fee8",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create another student and assign it to the classroom successfully",
              "fullTitle": "Student Entity Integration Tests should create another student and assign it to the classroom successfully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "2406cd2d-f603-4c74-882c-f76ad70cc9c4",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student information",
              "fullTitle": "Student Entity Integration Tests should update a student information",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedStudent = {\n    name: 'Updated Student'\n};\nconst updateRes = await request(app)\n    .put(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedStudent);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedStudent.name);",
              "err": {},
              "uuid": "e6c836db-878c-4b05-8e53-b626a992b3b4",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a student by ID",
              "fullTitle": "Student Entity Integration Tests should get a student by ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Updated Student');\nexpect(getRes.body.email).to.equal('teststudent@example.com');\nexpect(getRes.body.classroom._id).to.equal(classroomId);\nexpect(getRes.body.age).to.equal(20);\nexpect(getRes.body.address).to.equal('123 Test St');",
              "err": {},
              "uuid": "93c0d941-2acb-47e3-8cf3-5072703476b5",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get students by classroom",
              "fullTitle": "Student Entity Integration Tests should get students by classroom",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/students/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1);\nexpect(getRes.body[0].classroom._id).to.equal(classroomId);",
              "err": {},
              "uuid": "0c68ff21-cbb6-4e47-aa45-256bfe9a9243",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Entity Integration Tests should delete a student",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "e0ed0d83-3346-4ac6-9b54-58d5cde4bff1",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all students",
              "fullTitle": "Student Entity Integration Tests should get all students",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`);\n    \nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1); \nexpect(getRes.body[0]).to.have.property('_id');\nexpect(getRes.body[0]).to.have.property('name');\nexpect(getRes.body[0]).to.have.property('email');\nexpect(getRes.body[0].classroom._id).to.equal(classroomId);",
              "err": {},
              "uuid": "c22ce6dc-78a5-4cb1-93b2-9b042ffde039",
              "parentUUID": "9cd2502e-e3c3-4704-b649-a8f9eed34b0c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b2b721e-b939-477b-b585-01e23b8930d8",
            "6e18f2f9-3834-4212-873d-e6b5c9866e4f",
            "e86281d1-44e3-4d6c-8b09-9d186ed4fee8",
            "2406cd2d-f603-4c74-882c-f76ad70cc9c4",
            "e6c836db-878c-4b05-8e53-b626a992b3b4",
            "93c0d941-2acb-47e3-8cf3-5072703476b5",
            "0c68ff21-cbb6-4e47-aa45-256bfe9a9243",
            "e0ed0d83-3346-4ac6-9b54-58d5cde4bff1",
            "c22ce6dc-78a5-4cb1-93b2-9b042ffde039"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "32b8ab01-6682-4b3e-b385-ff5db8632671",
          "title": "User Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/user.integration.test.js",
          "file": "/tests/integration/user.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Entity Integration Tests\"",
              "fullTitle": "User Entity Integration Tests \"before all\" hook in \"User Entity Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await userModel.deleteMany({});",
              "err": {},
              "uuid": "4a68e7a9-38f6-4046-8409-dd84d0d09d43",
              "parentUUID": "32b8ab01-6682-4b3e-b385-ff5db8632671",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User Entity Integration Tests should create a new user",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n    username: 'Test User',\n    email: 'testuser@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\n\nuserId = res.body.user._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('user');\nexpect(res.body.user.username).to.equal(newUser.username);\nexpect(res.body.user.email).to.equal(newUser.email);",
              "err": {},
              "uuid": "e07f439b-30fc-4a5f-9b5e-de206f3b5e69",
              "parentUUID": "32b8ab01-6682-4b3e-b385-ff5db8632671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate a user",
              "fullTitle": "User Entity Integration Tests should authenticate a user",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@example.com',\n    password: 'password123'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = res.body.token;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
              "err": {},
              "uuid": "6e1daff6-b267-4994-ac1f-15cab0e6192d",
              "parentUUID": "32b8ab01-6682-4b3e-b385-ff5db8632671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid credentials",
              "fullTitle": "User Entity Integration Tests should return 400 for invalid credentials",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@example.com',\n    password: 'wrongpassword'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "88bedd7a-16a1-4f91-b910-1c87cd68f709",
              "parentUUID": "32b8ab01-6682-4b3e-b385-ff5db8632671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Entity Integration Tests should update a user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n    username: 'Updated User'\n};\nconst updateRes = await request(app)\n    .put(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedUser);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.username).to.equal(updatedUser.username);",
              "err": {},
              "uuid": "ff808c8c-6e83-45e3-a585-c1b172080ecb",
              "parentUUID": "32b8ab01-6682-4b3e-b385-ff5db8632671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a user by ID",
              "fullTitle": "User Entity Integration Tests should get a user by ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`);\n    \nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.have.property('_id');\nexpect(getRes.body._id).to.equal(userId);\nexpect(getRes.body.username).to.equal('Updated User');\nexpect(getRes.body.email).to.equal('testuser@example.com');",
              "err": {},
              "uuid": "0f03ae9b-5dd4-4760-a4e9-5c3f9ee7dcd6",
              "parentUUID": "32b8ab01-6682-4b3e-b385-ff5db8632671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all users",
              "fullTitle": "User Entity Integration Tests should get all users",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get('/api/users')\n    .set('Authorization', `Bearer ${token}`);\n    \nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1); \nexpect(getRes.body[0]).to.have.property('_id');\nexpect(getRes.body[0]).to.have.property('username');\nexpect(getRes.body[0]).to.have.property('email');",
              "err": {},
              "uuid": "1c39cf2b-0f3d-45b3-8495-93d14e568d32",
              "parentUUID": "32b8ab01-6682-4b3e-b385-ff5db8632671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Entity Integration Tests should delete a user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`);\n\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "ed4ae200-4199-44b6-8575-2a30e0500cb7",
              "parentUUID": "32b8ab01-6682-4b3e-b385-ff5db8632671",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e07f439b-30fc-4a5f-9b5e-de206f3b5e69",
            "6e1daff6-b267-4994-ac1f-15cab0e6192d",
            "88bedd7a-16a1-4f91-b910-1c87cd68f709",
            "ff808c8c-6e83-45e3-a585-c1b172080ecb",
            "0f03ae9b-5dd4-4760-a4e9-5c3f9ee7dcd6",
            "1c39cf2b-0f3d-45b3-8495-93d14e568d32",
            "ed4ae200-4199-44b6-8575-2a30e0500cb7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 190,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "df9f31cb-74fb-45b0-b350-692558841944",
          "title": "Classroom Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/classroom.test.js",
          "file": "/tests/unit/classroom.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"before each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'findById');",
              "err": {},
              "uuid": "73766239-c83a-4c1f-a331-e58942223667",
              "parentUUID": "df9f31cb-74fb-45b0-b350-692558841944",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"after each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.restore();",
              "err": {},
              "uuid": "c721de25-4eac-4c9d-bb84-232050bb8dcd",
              "parentUUID": "df9f31cb-74fb-45b0-b350-692558841944",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a classroom by ID",
              "fullTitle": "Classroom Model Unit Tests should find a classroom by ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nclassroomStub.resolves(mockClassroom);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.deep.equal(mockClassroom);",
              "err": {},
              "uuid": "b886e13c-2e2f-4066-8ff6-fcab61adb5fc",
              "parentUUID": "df9f31cb-74fb-45b0-b350-692558841944",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if classroom not found",
              "fullTitle": "Classroom Model Unit Tests should return null if classroom not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.resolves(null);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.be.null;",
              "err": {},
              "uuid": "ab89cd48-e5da-407d-900f-346a5a3b7998",
              "parentUUID": "df9f31cb-74fb-45b0-b350-692558841944",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new classroom",
              "fullTitle": "Classroom Model Unit Tests should create a new classroom",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst createStub = sinon.stub(classroomModel.prototype, 'save').resolves(mockClassroom);\nconst newClassroom = new classroomModel(mockClassroom);\nconst savedClassroom = await newClassroom.save();\nexpect(savedClassroom).to.deep.equal(mockClassroom);\ncreateStub.restore();",
              "err": {},
              "uuid": "9a2fb781-06ea-4ebf-b75b-1c5f9704ca1e",
              "parentUUID": "df9f31cb-74fb-45b0-b350-692558841944",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom",
              "fullTitle": "Classroom Model Unit Tests should update a classroom",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Updated Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst updateStub = sinon.stub(classroomModel, 'findByIdAndUpdate').resolves(mockClassroom);\nconst updatedClassroom = await classroomModel.findByIdAndUpdate('123', { name: 'Updated Classroom' }, { new: true });\nexpect(updatedClassroom).to.deep.equal(mockClassroom);\nupdateStub.restore();",
              "err": {},
              "uuid": "bc4beab0-2b60-4114-b8ea-95c8b9f5bb71",
              "parentUUID": "df9f31cb-74fb-45b0-b350-692558841944",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Model Unit Tests should delete a classroom",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(classroomModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedClassroom = await classroomModel.findByIdAndDelete('123');\nexpect(deletedClassroom).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "4f56ae4a-eaf5-47e1-92f2-54fd252d88dd",
              "parentUUID": "df9f31cb-74fb-45b0-b350-692558841944",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all classrooms",
              "fullTitle": "Classroom Model Unit Tests should get all classrooms",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'find');\nconst mockClassrooms = [\n    { id: '123', name: 'Classroom 1', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] },\n    { id: '124', name: 'Classroom 2', school: '456', capacity: 25, resources: ['Projector'] }\n];\nclassroomStub.resolves(mockClassrooms);\nconst classrooms = await classroomModel.find();\nexpect(classrooms).to.deep.equal(mockClassrooms);",
              "err": {},
              "uuid": "bd5ef1f6-25de-4abd-900e-615cd7c4e6c3",
              "parentUUID": "df9f31cb-74fb-45b0-b350-692558841944",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b886e13c-2e2f-4066-8ff6-fcab61adb5fc",
            "ab89cd48-e5da-407d-900f-346a5a3b7998",
            "9a2fb781-06ea-4ebf-b75b-1c5f9704ca1e",
            "bc4beab0-2b60-4114-b8ea-95c8b9f5bb71",
            "4f56ae4a-eaf5-47e1-92f2-54fd252d88dd",
            "bd5ef1f6-25de-4abd-900e-615cd7c4e6c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6caa1fba-e3b4-466b-bbbb-bb42752be569",
          "title": "School Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/school.test.js",
          "file": "/tests/unit/school.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"before each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub = sinon.stub(schoolModel, 'findById');",
              "err": {},
              "uuid": "e712b779-5a2e-4235-83d0-bc146bb9cf21",
              "parentUUID": "6caa1fba-e3b4-466b-bbbb-bb42752be569",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"after each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.restore();",
              "err": {},
              "uuid": "16b703f0-1514-4e03-8e98-4f7fe6d96393",
              "parentUUID": "6caa1fba-e3b4-466b-bbbb-bb42752be569",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a school by ID",
              "fullTitle": "School Model Unit Tests should find a school by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nschoolStub.resolves(mockSchool);\nconst school = await schoolModel.findById('123');\nexpect(school).to.deep.equal(mockSchool);",
              "err": {},
              "uuid": "0eacfa46-cfa9-4107-90b4-ac8d2127c1fc",
              "parentUUID": "6caa1fba-e3b4-466b-bbbb-bb42752be569",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if school not found",
              "fullTitle": "School Model Unit Tests should return null if school not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.resolves(null);\nconst school = await schoolModel.findById('123');\nexpect(school).to.be.null;",
              "err": {},
              "uuid": "917f8830-f1c3-484d-9381-eb6b40bb129b",
              "parentUUID": "6caa1fba-e3b4-466b-bbbb-bb42752be569",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new school",
              "fullTitle": "School Model Unit Tests should create a new school",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nconst createStub = sinon.stub(schoolModel.prototype, 'save').resolves(mockSchool);\nconst newSchool = new schoolModel(mockSchool);\nconst savedSchool = await newSchool.save();\nexpect(savedSchool).to.deep.equal(mockSchool);\ncreateStub.restore();",
              "err": {},
              "uuid": "31ae3a2c-c7d5-438f-a1d6-561659789762",
              "parentUUID": "6caa1fba-e3b4-466b-bbbb-bb42752be569",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Model Unit Tests should update a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Updated School' };\nconst updateStub = sinon.stub(schoolModel, 'findByIdAndUpdate').resolves(mockSchool);\nconst updatedSchool = await schoolModel.findByIdAndUpdate('123', { name: 'Updated School' }, { new: true });\nexpect(updatedSchool).to.deep.equal(mockSchool);\nupdateStub.restore();",
              "err": {},
              "uuid": "9b2a0e19-f063-4436-906b-9f587b95d2a2",
              "parentUUID": "6caa1fba-e3b4-466b-bbbb-bb42752be569",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Model Unit Tests should delete a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(schoolModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedSchool = await schoolModel.findByIdAndDelete('123');\nexpect(deletedSchool).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "9ee650fa-f1f7-4399-88c7-3c29c3d2a9e4",
              "parentUUID": "6caa1fba-e3b4-466b-bbbb-bb42752be569",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0eacfa46-cfa9-4107-90b4-ac8d2127c1fc",
            "917f8830-f1c3-484d-9381-eb6b40bb129b",
            "31ae3a2c-c7d5-438f-a1d6-561659789762",
            "9b2a0e19-f063-4436-906b-9f587b95d2a2",
            "9ee650fa-f1f7-4399-88c7-3c29c3d2a9e4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3c3415fe-07af-4b94-862f-ca8fd0982a1b",
          "title": "Student Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/student.test.js",
          "file": "/tests/unit/student.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"before each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub = sinon.stub(studentModel, 'findById');",
              "err": {},
              "uuid": "04492c5c-79bf-4e42-9950-6542a0ecff58",
              "parentUUID": "3c3415fe-07af-4b94-862f-ca8fd0982a1b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"after each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.restore();",
              "err": {},
              "uuid": "628ef57a-4875-4c1b-8072-1a9936c40184",
              "parentUUID": "3c3415fe-07af-4b94-862f-ca8fd0982a1b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a student by ID",
              "fullTitle": "Student Model Unit Tests should find a student by ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nstudentStub.resolves(mockStudent);\nconst student = await studentModel.findById('123');\nexpect(student).to.deep.equal(mockStudent);",
              "err": {},
              "uuid": "943b6716-afa8-4d2f-92a3-c3ec5f2f0934",
              "parentUUID": "3c3415fe-07af-4b94-862f-ca8fd0982a1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if student not found",
              "fullTitle": "Student Model Unit Tests should return null if student not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.resolves(null);\nconst student = await studentModel.findById('123');\nexpect(student).to.be.null;",
              "err": {},
              "uuid": "dc409a26-15cf-451f-a0bf-1bb971072ccd",
              "parentUUID": "3c3415fe-07af-4b94-862f-ca8fd0982a1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new student",
              "fullTitle": "Student Model Unit Tests should create a new student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nconst createStub = sinon.stub(studentModel.prototype, 'save').resolves(mockStudent);\nconst newStudent = new studentModel(mockStudent);\nconst savedStudent = await newStudent.save();\nexpect(savedStudent).to.deep.equal(mockStudent);\ncreateStub.restore();",
              "err": {},
              "uuid": "1ba54e34-d754-49e5-bac4-8482e780bf2a",
              "parentUUID": "3c3415fe-07af-4b94-862f-ca8fd0982a1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student",
              "fullTitle": "Student Model Unit Tests should update a student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Updated Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nconst updateStub = sinon.stub(studentModel, 'findByIdAndUpdate').resolves(mockStudent);\nconst updatedStudent = await studentModel.findByIdAndUpdate('123', { name: 'Updated Student' }, { new: true });\nexpect(updatedStudent).to.deep.equal(mockStudent);\nupdateStub.restore();",
              "err": {},
              "uuid": "852666e0-5e1f-4f4a-998c-f89087db0cdf",
              "parentUUID": "3c3415fe-07af-4b94-862f-ca8fd0982a1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Model Unit Tests should delete a student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(studentModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedStudent = await studentModel.findByIdAndDelete('123');\nexpect(deletedStudent).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "38672a63-8848-4c84-ad44-5fc930c2fa0d",
              "parentUUID": "3c3415fe-07af-4b94-862f-ca8fd0982a1b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "943b6716-afa8-4d2f-92a3-c3ec5f2f0934",
            "dc409a26-15cf-451f-a0bf-1bb971072ccd",
            "1ba54e34-d754-49e5-bac4-8482e780bf2a",
            "852666e0-5e1f-4f4a-998c-f89087db0cdf",
            "38672a63-8848-4c84-ad44-5fc930c2fa0d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d1388f7a-f035-4b11-ba8c-f5d9c95ff1e7",
          "title": "User Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/user.test.js",
          "file": "/tests/unit/user.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"before each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub = sinon.stub(userModel, 'findById');",
              "err": {},
              "uuid": "0dea50e2-e335-45e4-b1ea-e4717f7164de",
              "parentUUID": "d1388f7a-f035-4b11-ba8c-f5d9c95ff1e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"after each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.restore();",
              "err": {},
              "uuid": "83773b9f-cf28-443b-99ae-945df46af226",
              "parentUUID": "d1388f7a-f035-4b11-ba8c-f5d9c95ff1e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a user by ID",
              "fullTitle": "User Model Unit Tests should find a user by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User' };\nuserStub.resolves(mockUser);\nconst user = await userModel.findById('123');\nexpect(user).to.deep.equal(mockUser);",
              "err": {},
              "uuid": "7ee41353-3a28-4c2d-bfc2-4d7982736439",
              "parentUUID": "d1388f7a-f035-4b11-ba8c-f5d9c95ff1e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if user not found",
              "fullTitle": "User Model Unit Tests should return null if user not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.resolves(null);\nconst user = await userModel.findById('123');\nexpect(user).to.be.null;",
              "err": {},
              "uuid": "5b67973d-c2a9-4518-95d3-d73c36f54889",
              "parentUUID": "d1388f7a-f035-4b11-ba8c-f5d9c95ff1e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user",
              "fullTitle": "User Model Unit Tests should create a new user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@example.com', password: 'password123' };\nconst createStub = sinon.stub(userModel.prototype, 'save').resolves(mockUser);\nconst newUser = new userModel(mockUser);\nconst savedUser = await newUser.save();\nexpect(savedUser).to.deep.equal(mockUser);\ncreateStub.restore();",
              "err": {},
              "uuid": "98a48152-174a-48aa-b933-1eaf2ed0bc8c",
              "parentUUID": "d1388f7a-f035-4b11-ba8c-f5d9c95ff1e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find a user by email",
              "fullTitle": "User Model Unit Tests should find a user by email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@example.com' };\nconst findStub = sinon.stub(userModel, 'findOne').resolves(mockUser);\nconst user = await userModel.findOne({ email: 'testuser@example.com' });\nexpect(user).to.deep.equal(mockUser);\nfindStub.restore();",
              "err": {},
              "uuid": "e0fab58e-9515-49e0-b036-8d5b904ea4ed",
              "parentUUID": "d1388f7a-f035-4b11-ba8c-f5d9c95ff1e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Model Unit Tests should update a user",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Updated User', email: 'testuser@example.com' };\nconst updateStub = sinon.stub(userModel, 'findByIdAndUpdate').resolves(mockUser);\nconst updatedUser = await userModel.findByIdAndUpdate('123', { name: 'Updated User' }, { new: true });\nexpect(updatedUser).to.deep.equal(mockUser);\nupdateStub.restore();",
              "err": {},
              "uuid": "7f65e5a1-72f1-4ed2-ac0d-c449fb743de3",
              "parentUUID": "d1388f7a-f035-4b11-ba8c-f5d9c95ff1e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Model Unit Tests should delete a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(userModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedUser = await userModel.findByIdAndDelete('123');\nexpect(deletedUser).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "95347a42-9a8b-41a7-a53c-4eb153c8f25f",
              "parentUUID": "d1388f7a-f035-4b11-ba8c-f5d9c95ff1e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ee41353-3a28-4c2d-bfc2-4d7982736439",
            "5b67973d-c2a9-4518-95d3-d73c36f54889",
            "98a48152-174a-48aa-b933-1eaf2ed0bc8c",
            "e0fab58e-9515-49e0-b036-8d5b904ea4ed",
            "7f65e5a1-72f1-4ed2-ac0d-c449fb743de3",
            "95347a42-9a8b-41a7-a53c-4eb153c8f25f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}