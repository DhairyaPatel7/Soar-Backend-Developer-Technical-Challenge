{
  "stats": {
    "suites": 8,
    "tests": 45,
    "passes": 45,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-18T19:34:57.640Z",
    "end": "2024-12-18T19:34:58.626Z",
    "duration": 986,
    "testsRegistered": 45,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2fdc2036-17c8-4910-8a21-2a2485378224",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a9502551-dfdc-4c41-b6a7-cec8955b85b2",
          "title": "Classroom Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/classroom.integration.test.js",
          "file": "/tests/integration/classroom.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"before all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 283,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, and classrooms collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\n// Create a superadmin user\nconst newSuperadmin = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst superadminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSuperadmin);\nsuperadminId = superadminRes.body.user._id;\n// Authenticate the superadmin user\nconst superadminCredentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst superadminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(superadminCredentials);\nsuperadminToken = superadminAuthRes.body.token;\n// Create a schooladmin user\nconst newSchooladmin = {\n    username: 'School Admin',\n    email: 'schooladmin@example.com',\n    password: 'password123',\n    role: 'schooladmin'\n};\nconst schooladminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSchooladmin);\nschooladminId = schooladminRes.body.user._id;\n// Authenticate the schooladmin user\nconst schooladminCredentials = {\n    email: 'schooladmin@example.com',\n    password: 'password123'\n};\nconst schooladminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(schooladminCredentials);\nschooladminToken = schooladminAuthRes.body.token;\n// Create a school with the token of superadmin\nconst newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newSchool);\n\nschoolId = schoolRes.body._id;",
              "err": {},
              "uuid": "adf2d0b7-e870-43f6-b097-c8b9308ac020",
              "parentUUID": "a9502551-dfdc-4c41-b6a7-cec8955b85b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"after all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, and classrooms collections after all tests\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});",
              "err": {},
              "uuid": "00d2aaaf-dc1f-4bd5-84a2-1d0a42cb445e",
              "parentUUID": "a9502551-dfdc-4c41-b6a7-cec8955b85b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail to create a classroom with schooladmin user without school",
              "fullTitle": "Classroom Entity Integration Tests should fail to create a classroom with schooladmin user without school",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst res = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "b6be1dc6-f894-4389-8ba4-1ce09f476dac",
              "parentUUID": "a9502551-dfdc-4c41-b6a7-cec8955b85b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update schooladmin user to add school",
              "fullTitle": "Classroom Entity Integration Tests should update schooladmin user to add school",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedSchooladmin = {\n    school: schoolId\n};\nconst updateRes = await request(app)\n    .put(`/api/users/${schooladminId}`)\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(updatedSchooladmin);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.school).to.equal(schoolId);",
              "err": {},
              "uuid": "ee4ad98f-a301-4e30-9918-4d3da407e114",
              "parentUUID": "a9502551-dfdc-4c41-b6a7-cec8955b85b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new classroom with schooladmin user",
              "fullTitle": "Classroom Entity Integration Tests should create a new classroom with schooladmin user",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst res = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nclassroomId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newClassroom.name);\nexpect(res.body.school).to.equal(newClassroom.school);\nexpect(res.body.capacity).to.equal(newClassroom.capacity);\nexpect(res.body.resources).to.deep.equal(newClassroom.resources);",
              "err": {},
              "uuid": "e7bf39d5-b273-4411-a168-c8830701774d",
              "parentUUID": "a9502551-dfdc-4c41-b6a7-cec8955b85b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom capacity",
              "fullTitle": "Classroom Entity Integration Tests should update a classroom capacity",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    capacity: 35\n};\nconst updateRes = await request(app)\n    .put(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedClassroom);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.capacity).to.equal(updatedClassroom.capacity);",
              "err": {},
              "uuid": "4356f939-6890-4b34-a676-c045dbceb0d2",
              "parentUUID": "a9502551-dfdc-4c41-b6a7-cec8955b85b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a classroom by ID",
              "fullTitle": "Classroom Entity Integration Tests should get a classroom by ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Test Classroom');\nexpect(getRes.body.school._id).to.equal(schoolId);\nexpect(getRes.body.capacity).to.equal(35);\nexpect(getRes.body.resources).to.deep.equal(['Projector', 'Whiteboard']);",
              "err": {},
              "uuid": "1dea41e5-7344-4930-a93c-016d825b097a",
              "parentUUID": "a9502551-dfdc-4c41-b6a7-cec8955b85b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Entity Integration Tests should delete a classroom",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "12144dd4-e7e5-4bf5-b200-cd0081676ed3",
              "parentUUID": "a9502551-dfdc-4c41-b6a7-cec8955b85b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b6be1dc6-f894-4389-8ba4-1ce09f476dac",
            "ee4ad98f-a301-4e30-9918-4d3da407e114",
            "e7bf39d5-b273-4411-a168-c8830701774d",
            "4356f939-6890-4b34-a676-c045dbceb0d2",
            "1dea41e5-7344-4930-a93c-016d825b097a",
            "12144dd4-e7e5-4bf5-b200-cd0081676ed3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ad9f94da-b44e-47fa-b879-022e54e53ce7",
          "title": "School Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/school.integration.test.js",
          "file": "/tests/integration/school.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"School Entity Integration Tests\"",
              "fullTitle": "School Entity Integration Tests \"before all\" hook in \"School Entity Integration Tests\"",
              "timedOut": false,
              "duration": 119,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users and schools collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\n// Create a superadmin user\nconst newUser = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\nuserId = res.body.user._id;\n// Authenticate the superadmin user\nconst credentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst authRes = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = authRes.body.token;",
              "err": {},
              "uuid": "bcaf54f6-4861-4415-89bf-f91198966b9f",
              "parentUUID": "ad9f94da-b44e-47fa-b879-022e54e53ce7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new school",
              "fullTitle": "School Entity Integration Tests should create a new school",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: userId\n};\nconst res = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${token}`)\n    .send(newSchool);\nschoolId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newSchool.name);\nexpect(res.body.address).to.equal(newSchool.address);\nexpect(res.body.phone).to.equal(newSchool.phone);\nexpect(res.body.email).to.equal(newSchool.email);\nexpect(res.body.adminId).to.equal(newSchool.adminId);",
              "err": {},
              "uuid": "78550f2a-257b-4ecc-93f3-820c7029074d",
              "parentUUID": "ad9f94da-b44e-47fa-b879-022e54e53ce7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a school by ID",
              "fullTitle": "School Entity Integration Tests should get a school by ID",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: userId\n};\n// Get the school by ID\nconst getRes = await request(app)\n    .get(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal(newSchool.name);\nexpect(getRes.body.address).to.equal(newSchool.address);\nexpect(getRes.body.phone).to.equal(newSchool.phone);\nexpect(getRes.body.email).to.equal(newSchool.email);\nexpect(getRes.body.admin._id).to.equal(userId);",
              "err": {},
              "uuid": "0e56e6a0-7f76-456c-9d95-22bd8210843a",
              "parentUUID": "ad9f94da-b44e-47fa-b879-022e54e53ce7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Entity Integration Tests should update a school",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Update the school's name\nconst updatedSchool = {\n    name: 'Updated School'\n};\nconst updateRes = await request(app)\n    .put(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedSchool);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedSchool.name);",
              "err": {},
              "uuid": "15ad9914-7b9e-49c6-a7d7-9d060bf21d7b",
              "parentUUID": "ad9f94da-b44e-47fa-b879-022e54e53ce7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Entity Integration Tests should delete a school",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete the school\nconst deleteRes = await request(app)\n    .delete(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "5ad200f9-77c3-41f0-bd9c-60c7f7027edd",
              "parentUUID": "ad9f94da-b44e-47fa-b879-022e54e53ce7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78550f2a-257b-4ecc-93f3-820c7029074d",
            "0e56e6a0-7f76-456c-9d95-22bd8210843a",
            "15ad9914-7b9e-49c6-a7d7-9d060bf21d7b",
            "5ad200f9-77c3-41f0-bd9c-60c7f7027edd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 36,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "97740379-4e6f-4035-af59-ace1fc4bc004",
          "title": "Student Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/student.integration.test.js",
          "file": "/tests/integration/student.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"before all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 251,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, classrooms, and students collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\nawait studentModel.deleteMany({});\n// Create a superadmin user\nconst newSuperadmin = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst superadminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSuperadmin);\nsuperadminId = superadminRes.body.user._id;\n// Authenticate the superadmin user\nconst superadminCredentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst superadminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(superadminCredentials);\nsuperadminToken = superadminAuthRes.body.token;\n// Create a schooladmin user\nconst newSchooladmin = {\n    username: 'School Admin',\n    email: 'schooladmin@example.com',\n    password: 'password123',\n    role: 'schooladmin'\n};\nconst schooladminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSchooladmin);\nschooladminId = schooladminRes.body.user._id;\n// Authenticate the schooladmin user\nconst schooladminCredentials = {\n    email: 'schooladmin@example.com',\n    password: 'password123'\n};\nconst schooladminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(schooladminCredentials);\nschooladminToken = schooladminAuthRes.body.token;\n// Create a school with the token of superadmin\nconst newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newSchool);\nschoolId = schoolRes.body._id;\n// Update schooladmin user to assign this school to this user\nconst updatedSchooladmin = {\n    school: schoolId\n};\nconst updateSchooladminRes = await request(app)\n    .put(`/api/users/${schooladminId}`)\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(updatedSchooladmin);\nexpect(updateSchooladminRes.status).to.equal(200);\nexpect(updateSchooladminRes.body.school).to.equal(schoolId);\n// Create a classroom with schooladmin user with capacity as 1\nconst newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 1,\n    resources: ['Projector', 'Whiteboard']\n};\nconst classroomRes = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nclassroomId = classroomRes.body._id;",
              "err": {},
              "uuid": "a369dd49-331a-4d86-a3d2-74241f8f78ed",
              "parentUUID": "97740379-4e6f-4035-af59-ace1fc4bc004",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"after all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, classrooms, and students collections after all tests\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\nawait studentModel.deleteMany({});",
              "err": {},
              "uuid": "5656c5df-cc41-401b-9b6c-99d64f671ebe",
              "parentUUID": "97740379-4e6f-4035-af59-ace1fc4bc004",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a student and assign it to the classroom",
              "fullTitle": "Student Entity Integration Tests should create a student and assign it to the classroom",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Test Student',\n    email: 'teststudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nstudentId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "1ce1a13c-4616-4226-b4c6-63dd32dc0089",
              "parentUUID": "97740379-4e6f-4035-af59-ace1fc4bc004",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create another student in the same classroom due to capacity",
              "fullTitle": "Student Entity Integration Tests should fail to create another student in the same classroom due to capacity",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "9383bf19-e351-4fa7-b5eb-e78f963055a9",
              "parentUUID": "97740379-4e6f-4035-af59-ace1fc4bc004",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update classroom capacity to 30",
              "fullTitle": "Student Entity Integration Tests should update classroom capacity to 30",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    capacity: 30\n};\nconst updateRes = await request(app)\n    .put(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedClassroom);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.capacity).to.equal(updatedClassroom.capacity);",
              "err": {},
              "uuid": "2f487bbe-df66-4878-bc3d-dfc170963147",
              "parentUUID": "97740379-4e6f-4035-af59-ace1fc4bc004",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create another student and assign it to the classroom successfully",
              "fullTitle": "Student Entity Integration Tests should create another student and assign it to the classroom successfully",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "ab2507be-667c-4bad-b4c3-0b46d8814f7a",
              "parentUUID": "97740379-4e6f-4035-af59-ace1fc4bc004",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student information",
              "fullTitle": "Student Entity Integration Tests should update a student information",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedStudent = {\n    name: 'Updated Student'\n};\nconst updateRes = await request(app)\n    .put(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedStudent);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedStudent.name);",
              "err": {},
              "uuid": "c6305907-c3e2-46a3-940d-ade8387ce0ad",
              "parentUUID": "97740379-4e6f-4035-af59-ace1fc4bc004",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a student by ID",
              "fullTitle": "Student Entity Integration Tests should get a student by ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Updated Student');\nexpect(getRes.body.email).to.equal('teststudent@example.com');\nexpect(getRes.body.classroom._id).to.equal(classroomId);\nexpect(getRes.body.age).to.equal(20);\nexpect(getRes.body.address).to.equal('123 Test St');",
              "err": {},
              "uuid": "663d4cef-bd71-4e86-b639-35fa6c1f4f47",
              "parentUUID": "97740379-4e6f-4035-af59-ace1fc4bc004",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get students by classroom",
              "fullTitle": "Student Entity Integration Tests should get students by classroom",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/students/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1);\nexpect(getRes.body[0].classroom._id).to.equal(classroomId);",
              "err": {},
              "uuid": "8e0ed7fc-5f79-4427-a950-eef60795df7c",
              "parentUUID": "97740379-4e6f-4035-af59-ace1fc4bc004",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Entity Integration Tests should delete a student",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "de6de5a3-43f5-40b0-9c58-eda9be431793",
              "parentUUID": "97740379-4e6f-4035-af59-ace1fc4bc004",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1ce1a13c-4616-4226-b4c6-63dd32dc0089",
            "9383bf19-e351-4fa7-b5eb-e78f963055a9",
            "2f487bbe-df66-4878-bc3d-dfc170963147",
            "ab2507be-667c-4bad-b4c3-0b46d8814f7a",
            "c6305907-c3e2-46a3-940d-ade8387ce0ad",
            "663d4cef-bd71-4e86-b639-35fa6c1f4f47",
            "8e0ed7fc-5f79-4427-a950-eef60795df7c",
            "de6de5a3-43f5-40b0-9c58-eda9be431793"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "22023729-7f20-40a2-9788-549fb6419716",
          "title": "User Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/user.integration.test.js",
          "file": "/tests/integration/user.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Entity Integration Tests\"",
              "fullTitle": "User Entity Integration Tests \"before all\" hook in \"User Entity Integration Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await userModel.deleteMany({});",
              "err": {},
              "uuid": "44d3ed64-dac9-48b0-9440-e474625953d1",
              "parentUUID": "22023729-7f20-40a2-9788-549fb6419716",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User Entity Integration Tests should create a new user",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n    username: 'Test User',\n    email: 'testuser@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\n\nuserId = res.body.user._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('user');\nexpect(res.body.user.username).to.equal(newUser.username);\nexpect(res.body.user.email).to.equal(newUser.email);",
              "err": {},
              "uuid": "45db9bb5-cd68-48b4-bff0-c39d03ff97c0",
              "parentUUID": "22023729-7f20-40a2-9788-549fb6419716",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate a user",
              "fullTitle": "User Entity Integration Tests should authenticate a user",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@example.com',\n    password: 'password123'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = res.body.token;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
              "err": {},
              "uuid": "10b9e79b-3e0a-4d65-bc7a-37b04f714345",
              "parentUUID": "22023729-7f20-40a2-9788-549fb6419716",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid credentials",
              "fullTitle": "User Entity Integration Tests should return 400 for invalid credentials",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@example.com',\n    password: 'wrongpassword'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "6f5b76ff-8998-48fb-87b6-d93d51f311f0",
              "parentUUID": "22023729-7f20-40a2-9788-549fb6419716",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Entity Integration Tests should update a user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n    username: 'Updated User'\n};\nconst updateRes = await request(app)\n    .put(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedUser);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.username).to.equal(updatedUser.username);",
              "err": {},
              "uuid": "52602446-d157-40d9-8c74-c1b75bb9eb07",
              "parentUUID": "22023729-7f20-40a2-9788-549fb6419716",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Entity Integration Tests should delete a user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`);\n\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "ae255182-c3e3-415e-8aae-f5347ed92d14",
              "parentUUID": "22023729-7f20-40a2-9788-549fb6419716",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45db9bb5-cd68-48b4-bff0-c39d03ff97c0",
            "10b9e79b-3e0a-4d65-bc7a-37b04f714345",
            "6f5b76ff-8998-48fb-87b6-d93d51f311f0",
            "52602446-d157-40d9-8c74-c1b75bb9eb07",
            "ae255182-c3e3-415e-8aae-f5347ed92d14"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 184,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c3005880-6480-4833-8252-c831d2567d8f",
          "title": "Classroom Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/classroom.test.js",
          "file": "/tests/unit/classroom.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"before each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'findById');",
              "err": {},
              "uuid": "63704f09-148f-4b78-b137-9baf4f28b39a",
              "parentUUID": "c3005880-6480-4833-8252-c831d2567d8f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"after each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.restore();",
              "err": {},
              "uuid": "cd024596-7281-4b28-9d6b-1246408be477",
              "parentUUID": "c3005880-6480-4833-8252-c831d2567d8f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a classroom by ID",
              "fullTitle": "Classroom Model Unit Tests should find a classroom by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nclassroomStub.resolves(mockClassroom);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.deep.equal(mockClassroom);",
              "err": {},
              "uuid": "cb1ba94f-9429-4841-9eb9-7f5bc91c7546",
              "parentUUID": "c3005880-6480-4833-8252-c831d2567d8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if classroom not found",
              "fullTitle": "Classroom Model Unit Tests should return null if classroom not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.resolves(null);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.be.null;",
              "err": {},
              "uuid": "8f5046a2-d912-42a5-a1de-13b1d1ac8e9b",
              "parentUUID": "c3005880-6480-4833-8252-c831d2567d8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new classroom",
              "fullTitle": "Classroom Model Unit Tests should create a new classroom",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst createStub = sinon.stub(classroomModel.prototype, 'save').resolves(mockClassroom);\nconst newClassroom = new classroomModel(mockClassroom);\nconst savedClassroom = await newClassroom.save();\nexpect(savedClassroom).to.deep.equal(mockClassroom);\ncreateStub.restore();",
              "err": {},
              "uuid": "d3843dbc-5bde-40c8-b4a4-98c2024b6b41",
              "parentUUID": "c3005880-6480-4833-8252-c831d2567d8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom",
              "fullTitle": "Classroom Model Unit Tests should update a classroom",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Updated Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst updateStub = sinon.stub(classroomModel, 'findByIdAndUpdate').resolves(mockClassroom);\nconst updatedClassroom = await classroomModel.findByIdAndUpdate('123', { name: 'Updated Classroom' }, { new: true });\nexpect(updatedClassroom).to.deep.equal(mockClassroom);\nupdateStub.restore();",
              "err": {},
              "uuid": "1c1a4004-7903-4be0-87c9-c6903a862b2f",
              "parentUUID": "c3005880-6480-4833-8252-c831d2567d8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Model Unit Tests should delete a classroom",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(classroomModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedClassroom = await classroomModel.findByIdAndDelete('123');\nexpect(deletedClassroom).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "0d756a82-4c09-49ef-ba64-75fe65d861cd",
              "parentUUID": "c3005880-6480-4833-8252-c831d2567d8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all classrooms",
              "fullTitle": "Classroom Model Unit Tests should get all classrooms",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'find');\nconst mockClassrooms = [\n    { id: '123', name: 'Classroom 1', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] },\n    { id: '124', name: 'Classroom 2', school: '456', capacity: 25, resources: ['Projector'] }\n];\nclassroomStub.resolves(mockClassrooms);\nconst classrooms = await classroomModel.find();\nexpect(classrooms).to.deep.equal(mockClassrooms);",
              "err": {},
              "uuid": "7d5be20d-0c43-4b3d-bf68-b7bb5505745f",
              "parentUUID": "c3005880-6480-4833-8252-c831d2567d8f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb1ba94f-9429-4841-9eb9-7f5bc91c7546",
            "8f5046a2-d912-42a5-a1de-13b1d1ac8e9b",
            "d3843dbc-5bde-40c8-b4a4-98c2024b6b41",
            "1c1a4004-7903-4be0-87c9-c6903a862b2f",
            "0d756a82-4c09-49ef-ba64-75fe65d861cd",
            "7d5be20d-0c43-4b3d-bf68-b7bb5505745f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7730f338-325b-41e3-8c2a-5898f4ab1046",
          "title": "School Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/school.test.js",
          "file": "/tests/unit/school.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"before each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub = sinon.stub(schoolModel, 'findById');",
              "err": {},
              "uuid": "4d75b710-b3d2-4f75-b575-948c377d0a55",
              "parentUUID": "7730f338-325b-41e3-8c2a-5898f4ab1046",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"after each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.restore();",
              "err": {},
              "uuid": "e632cef4-137b-490a-a566-800e4657c988",
              "parentUUID": "7730f338-325b-41e3-8c2a-5898f4ab1046",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a school by ID",
              "fullTitle": "School Model Unit Tests should find a school by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nschoolStub.resolves(mockSchool);\nconst school = await schoolModel.findById('123');\nexpect(school).to.deep.equal(mockSchool);",
              "err": {},
              "uuid": "febe73f5-8959-42e4-b032-17483f50f0f8",
              "parentUUID": "7730f338-325b-41e3-8c2a-5898f4ab1046",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if school not found",
              "fullTitle": "School Model Unit Tests should return null if school not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.resolves(null);\nconst school = await schoolModel.findById('123');\nexpect(school).to.be.null;",
              "err": {},
              "uuid": "0d976376-8288-4c7b-b6c2-6730b2032a19",
              "parentUUID": "7730f338-325b-41e3-8c2a-5898f4ab1046",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new school",
              "fullTitle": "School Model Unit Tests should create a new school",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nconst createStub = sinon.stub(schoolModel.prototype, 'save').resolves(mockSchool);\nconst newSchool = new schoolModel(mockSchool);\nconst savedSchool = await newSchool.save();\nexpect(savedSchool).to.deep.equal(mockSchool);\ncreateStub.restore();",
              "err": {},
              "uuid": "a526c9e4-bc1d-4c2e-913b-b322fc4d517e",
              "parentUUID": "7730f338-325b-41e3-8c2a-5898f4ab1046",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Model Unit Tests should update a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Updated School' };\nconst updateStub = sinon.stub(schoolModel, 'findByIdAndUpdate').resolves(mockSchool);\nconst updatedSchool = await schoolModel.findByIdAndUpdate('123', { name: 'Updated School' }, { new: true });\nexpect(updatedSchool).to.deep.equal(mockSchool);\nupdateStub.restore();",
              "err": {},
              "uuid": "359ec3f7-0616-4273-b5a8-8cbba5454f2c",
              "parentUUID": "7730f338-325b-41e3-8c2a-5898f4ab1046",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Model Unit Tests should delete a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(schoolModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedSchool = await schoolModel.findByIdAndDelete('123');\nexpect(deletedSchool).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "8214135f-9525-49d9-9f4d-7c67f1f001c2",
              "parentUUID": "7730f338-325b-41e3-8c2a-5898f4ab1046",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "febe73f5-8959-42e4-b032-17483f50f0f8",
            "0d976376-8288-4c7b-b6c2-6730b2032a19",
            "a526c9e4-bc1d-4c2e-913b-b322fc4d517e",
            "359ec3f7-0616-4273-b5a8-8cbba5454f2c",
            "8214135f-9525-49d9-9f4d-7c67f1f001c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "02b65c8c-3c34-4379-8319-32738072cee4",
          "title": "Student Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/student.test.js",
          "file": "/tests/unit/student.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"before each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub = sinon.stub(studentModel, 'findById');",
              "err": {},
              "uuid": "cfb649a9-34da-4cd7-93b0-b3033cc4dd34",
              "parentUUID": "02b65c8c-3c34-4379-8319-32738072cee4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"after each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.restore();",
              "err": {},
              "uuid": "0a02290a-d12e-40bd-93de-97a7d7f0d199",
              "parentUUID": "02b65c8c-3c34-4379-8319-32738072cee4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a student by ID",
              "fullTitle": "Student Model Unit Tests should find a student by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nstudentStub.resolves(mockStudent);\nconst student = await studentModel.findById('123');\nexpect(student).to.deep.equal(mockStudent);",
              "err": {},
              "uuid": "12ff6e84-3b4a-4394-8460-bf0fc39e9686",
              "parentUUID": "02b65c8c-3c34-4379-8319-32738072cee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if student not found",
              "fullTitle": "Student Model Unit Tests should return null if student not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.resolves(null);\nconst student = await studentModel.findById('123');\nexpect(student).to.be.null;",
              "err": {},
              "uuid": "e901ea1a-143d-45c1-8a67-7dece2c12c47",
              "parentUUID": "02b65c8c-3c34-4379-8319-32738072cee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new student",
              "fullTitle": "Student Model Unit Tests should create a new student",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nconst createStub = sinon.stub(studentModel.prototype, 'save').resolves(mockStudent);\nconst newStudent = new studentModel(mockStudent);\nconst savedStudent = await newStudent.save();\nexpect(savedStudent).to.deep.equal(mockStudent);\ncreateStub.restore();",
              "err": {},
              "uuid": "7436270e-b34d-45ea-b2eb-04942ab2bebc",
              "parentUUID": "02b65c8c-3c34-4379-8319-32738072cee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student",
              "fullTitle": "Student Model Unit Tests should update a student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Updated Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nconst updateStub = sinon.stub(studentModel, 'findByIdAndUpdate').resolves(mockStudent);\nconst updatedStudent = await studentModel.findByIdAndUpdate('123', { name: 'Updated Student' }, { new: true });\nexpect(updatedStudent).to.deep.equal(mockStudent);\nupdateStub.restore();",
              "err": {},
              "uuid": "25dd3df8-9080-49a8-934c-c50f36baa458",
              "parentUUID": "02b65c8c-3c34-4379-8319-32738072cee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Model Unit Tests should delete a student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(studentModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedStudent = await studentModel.findByIdAndDelete('123');\nexpect(deletedStudent).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "8986afae-1bff-4122-8c4d-a9b390ae606d",
              "parentUUID": "02b65c8c-3c34-4379-8319-32738072cee4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "12ff6e84-3b4a-4394-8460-bf0fc39e9686",
            "e901ea1a-143d-45c1-8a67-7dece2c12c47",
            "7436270e-b34d-45ea-b2eb-04942ab2bebc",
            "25dd3df8-9080-49a8-934c-c50f36baa458",
            "8986afae-1bff-4122-8c4d-a9b390ae606d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "95dc605b-34ef-4070-93a9-184a614f2bfa",
          "title": "User Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/user.test.js",
          "file": "/tests/unit/user.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"before each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub = sinon.stub(userModel, 'findById');",
              "err": {},
              "uuid": "76278bce-fca2-4013-af35-ec6c508ad340",
              "parentUUID": "95dc605b-34ef-4070-93a9-184a614f2bfa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"after each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.restore();",
              "err": {},
              "uuid": "706a3bde-2b0f-408f-ae80-bdfdb5229550",
              "parentUUID": "95dc605b-34ef-4070-93a9-184a614f2bfa",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a user by ID",
              "fullTitle": "User Model Unit Tests should find a user by ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User' };\nuserStub.resolves(mockUser);\nconst user = await userModel.findById('123');\nexpect(user).to.deep.equal(mockUser);",
              "err": {},
              "uuid": "a9fd2494-3702-4eae-b842-7933034ff9c0",
              "parentUUID": "95dc605b-34ef-4070-93a9-184a614f2bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if user not found",
              "fullTitle": "User Model Unit Tests should return null if user not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.resolves(null);\nconst user = await userModel.findById('123');\nexpect(user).to.be.null;",
              "err": {},
              "uuid": "8521292d-7784-4fd7-885f-f8fdae6eeb3b",
              "parentUUID": "95dc605b-34ef-4070-93a9-184a614f2bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user",
              "fullTitle": "User Model Unit Tests should create a new user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@example.com', password: 'password123' };\nconst createStub = sinon.stub(userModel.prototype, 'save').resolves(mockUser);\nconst newUser = new userModel(mockUser);\nconst savedUser = await newUser.save();\nexpect(savedUser).to.deep.equal(mockUser);\ncreateStub.restore();",
              "err": {},
              "uuid": "9ca461ce-151d-4701-9a3c-ae29c23e3db4",
              "parentUUID": "95dc605b-34ef-4070-93a9-184a614f2bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find a user by email",
              "fullTitle": "User Model Unit Tests should find a user by email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@example.com' };\nconst findStub = sinon.stub(userModel, 'findOne').resolves(mockUser);\nconst user = await userModel.findOne({ email: 'testuser@example.com' });\nexpect(user).to.deep.equal(mockUser);\nfindStub.restore();",
              "err": {},
              "uuid": "a6d5ae39-8a12-4b68-9486-43dfaa62ca88",
              "parentUUID": "95dc605b-34ef-4070-93a9-184a614f2bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Model Unit Tests should update a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Updated User', email: 'testuser@example.com' };\nconst updateStub = sinon.stub(userModel, 'findByIdAndUpdate').resolves(mockUser);\nconst updatedUser = await userModel.findByIdAndUpdate('123', { name: 'Updated User' }, { new: true });\nexpect(updatedUser).to.deep.equal(mockUser);\nupdateStub.restore();",
              "err": {},
              "uuid": "4ae56829-39f5-4d7b-a03a-707a7dd37fb8",
              "parentUUID": "95dc605b-34ef-4070-93a9-184a614f2bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Model Unit Tests should delete a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(userModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedUser = await userModel.findByIdAndDelete('123');\nexpect(deletedUser).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "e4e22ac2-b2bf-49fc-9c74-27bf2371156f",
              "parentUUID": "95dc605b-34ef-4070-93a9-184a614f2bfa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a9fd2494-3702-4eae-b842-7933034ff9c0",
            "8521292d-7784-4fd7-885f-f8fdae6eeb3b",
            "9ca461ce-151d-4701-9a3c-ae29c23e3db4",
            "a6d5ae39-8a12-4b68-9486-43dfaa62ca88",
            "4ae56829-39f5-4d7b-a03a-707a7dd37fb8",
            "e4e22ac2-b2bf-49fc-9c74-27bf2371156f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}