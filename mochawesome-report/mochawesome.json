{
  "stats": {
    "suites": 8,
    "tests": 45,
    "passes": 45,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-19T06:58:35.468Z",
    "end": "2024-12-19T06:58:37.869Z",
    "duration": 2401,
    "testsRegistered": 45,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "136ecf89-c674-4dd9-b5d8-c0f889573863",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d5ff6ce9-5873-404d-be07-42fc1c6073d6",
          "title": "Classroom Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/classroom.integration.test.js",
          "file": "/tests/integration/classroom.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"before all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 834,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, and classrooms collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\n// Create a superadmin user\nconst newSuperadmin = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst superadminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSuperadmin);\nsuperadminId = superadminRes.body.user._id;\n// Authenticate the superadmin user\nconst superadminCredentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst superadminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(superadminCredentials);\nsuperadminToken = superadminAuthRes.body.token;\n// Create a schooladmin user\nconst newSchooladmin = {\n    username: 'School Admin',\n    email: 'schooladmin@example.com',\n    password: 'password123',\n    role: 'schooladmin'\n};\nconst schooladminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSchooladmin);\nschooladminId = schooladminRes.body.user._id;\n// Authenticate the schooladmin user\nconst schooladminCredentials = {\n    email: 'schooladmin@example.com',\n    password: 'password123'\n};\nconst schooladminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(schooladminCredentials);\nschooladminToken = schooladminAuthRes.body.token;\n// Create a school with the token of superadmin\nconst newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newSchool);\n\nschoolId = schoolRes.body._id;",
              "err": {},
              "uuid": "d1bb8b3a-2f29-4667-8e98-20910581fc0c",
              "parentUUID": "d5ff6ce9-5873-404d-be07-42fc1c6073d6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"after all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, and classrooms collections after all tests\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});",
              "err": {},
              "uuid": "c9862a50-43a4-4a20-84e3-09510f5343e8",
              "parentUUID": "d5ff6ce9-5873-404d-be07-42fc1c6073d6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail to create a classroom with schooladmin user without school",
              "fullTitle": "Classroom Entity Integration Tests should fail to create a classroom with schooladmin user without school",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst res = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "58af1ff1-a4d0-4a45-8e8c-777c922a2114",
              "parentUUID": "d5ff6ce9-5873-404d-be07-42fc1c6073d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update schooladmin user to add school",
              "fullTitle": "Classroom Entity Integration Tests should update schooladmin user to add school",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedSchooladmin = {\n    school: schoolId\n};\nconst updateRes = await request(app)\n    .put(`/api/users/${schooladminId}`)\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(updatedSchooladmin);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.school).to.equal(schoolId);",
              "err": {},
              "uuid": "36a9da85-5f0a-49b3-8b42-50761c48e7d2",
              "parentUUID": "d5ff6ce9-5873-404d-be07-42fc1c6073d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new classroom with schooladmin user",
              "fullTitle": "Classroom Entity Integration Tests should create a new classroom with schooladmin user",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst res = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nclassroomId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newClassroom.name);\nexpect(res.body.school).to.equal(newClassroom.school);\nexpect(res.body.capacity).to.equal(newClassroom.capacity);\nexpect(res.body.resources).to.deep.equal(newClassroom.resources);",
              "err": {},
              "uuid": "3060387c-4bf4-4a01-ba20-f2f6994341f8",
              "parentUUID": "d5ff6ce9-5873-404d-be07-42fc1c6073d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom capacity",
              "fullTitle": "Classroom Entity Integration Tests should update a classroom capacity",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    capacity: 35\n};\nconst updateRes = await request(app)\n    .put(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedClassroom);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.capacity).to.equal(updatedClassroom.capacity);",
              "err": {},
              "uuid": "adca21ab-6b15-4cf5-b8ab-cb4da25ef496",
              "parentUUID": "d5ff6ce9-5873-404d-be07-42fc1c6073d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a classroom by ID",
              "fullTitle": "Classroom Entity Integration Tests should get a classroom by ID",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Test Classroom');\nexpect(getRes.body.school._id).to.equal(schoolId);\nexpect(getRes.body.capacity).to.equal(35);\nexpect(getRes.body.resources).to.deep.equal(['Projector', 'Whiteboard']);",
              "err": {},
              "uuid": "4d83b6ca-f6ea-48d8-99e8-4cff88931dc7",
              "parentUUID": "d5ff6ce9-5873-404d-be07-42fc1c6073d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Entity Integration Tests should delete a classroom",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "be7c49c6-c2d5-4458-ad01-a58c142481d0",
              "parentUUID": "d5ff6ce9-5873-404d-be07-42fc1c6073d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "58af1ff1-a4d0-4a45-8e8c-777c922a2114",
            "36a9da85-5f0a-49b3-8b42-50761c48e7d2",
            "3060387c-4bf4-4a01-ba20-f2f6994341f8",
            "adca21ab-6b15-4cf5-b8ab-cb4da25ef496",
            "4d83b6ca-f6ea-48d8-99e8-4cff88931dc7",
            "be7c49c6-c2d5-4458-ad01-a58c142481d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 238,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c80d2521-a529-4466-a79e-430672a6511b",
          "title": "School Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/school.integration.test.js",
          "file": "/tests/integration/school.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"School Entity Integration Tests\"",
              "fullTitle": "School Entity Integration Tests \"before all\" hook in \"School Entity Integration Tests\"",
              "timedOut": false,
              "duration": 161,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users and schools collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\n// Create a superadmin user\nconst newUser = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\nuserId = res.body.user._id;\n// Authenticate the superadmin user\nconst credentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst authRes = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = authRes.body.token;",
              "err": {},
              "uuid": "902b1609-501e-43a1-84fa-c6d792e73a5f",
              "parentUUID": "c80d2521-a529-4466-a79e-430672a6511b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new school",
              "fullTitle": "School Entity Integration Tests should create a new school",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: userId\n};\nconst res = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${token}`)\n    .send(newSchool);\nschoolId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newSchool.name);\nexpect(res.body.address).to.equal(newSchool.address);\nexpect(res.body.phone).to.equal(newSchool.phone);\nexpect(res.body.email).to.equal(newSchool.email);\nexpect(res.body.adminId).to.equal(newSchool.adminId);",
              "err": {},
              "uuid": "33756a31-8a84-4738-b740-977294a3288b",
              "parentUUID": "c80d2521-a529-4466-a79e-430672a6511b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a school by ID",
              "fullTitle": "School Entity Integration Tests should get a school by ID",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: userId\n};\n// Get the school by ID\nconst getRes = await request(app)\n    .get(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal(newSchool.name);\nexpect(getRes.body.address).to.equal(newSchool.address);\nexpect(getRes.body.phone).to.equal(newSchool.phone);\nexpect(getRes.body.email).to.equal(newSchool.email);\nexpect(getRes.body.admin._id).to.equal(userId);",
              "err": {},
              "uuid": "5e1c99f5-4da5-4e2f-9877-4ebf5673715e",
              "parentUUID": "c80d2521-a529-4466-a79e-430672a6511b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Entity Integration Tests should update a school",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Update the school's name\nconst updatedSchool = {\n    name: 'Updated School'\n};\nconst updateRes = await request(app)\n    .put(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedSchool);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedSchool.name);",
              "err": {},
              "uuid": "32a27a51-982c-440d-b912-b5826cd441f4",
              "parentUUID": "c80d2521-a529-4466-a79e-430672a6511b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Entity Integration Tests should delete a school",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete the school\nconst deleteRes = await request(app)\n    .delete(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "ce736a6e-6917-48d9-a761-4f4742f0a3e8",
              "parentUUID": "c80d2521-a529-4466-a79e-430672a6511b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "33756a31-8a84-4738-b740-977294a3288b",
            "5e1c99f5-4da5-4e2f-9877-4ebf5673715e",
            "32a27a51-982c-440d-b912-b5826cd441f4",
            "ce736a6e-6917-48d9-a761-4f4742f0a3e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b8950c70-339c-4163-9cab-70b238dc6d3f",
          "title": "Student Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/student.integration.test.js",
          "file": "/tests/integration/student.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"before all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 398,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, classrooms, and students collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\nawait studentModel.deleteMany({});\n// Create a superadmin user\nconst newSuperadmin = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst superadminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSuperadmin);\nsuperadminId = superadminRes.body.user._id;\n// Authenticate the superadmin user\nconst superadminCredentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst superadminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(superadminCredentials);\nsuperadminToken = superadminAuthRes.body.token;\n// Create a schooladmin user\nconst newSchooladmin = {\n    username: 'School Admin',\n    email: 'schooladmin@example.com',\n    password: 'password123',\n    role: 'schooladmin'\n};\nconst schooladminRes = await request(app)\n    .post('/api/users/register')\n    .send(newSchooladmin);\nschooladminId = schooladminRes.body.user._id;\n// Authenticate the schooladmin user\nconst schooladminCredentials = {\n    email: 'schooladmin@example.com',\n    password: 'password123'\n};\nconst schooladminAuthRes = await request(app)\n    .post('/api/users/login')\n    .send(schooladminCredentials);\nschooladminToken = schooladminAuthRes.body.token;\n// Create a school with the token of superadmin\nconst newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(newSchool);\nschoolId = schoolRes.body._id;\n// Update schooladmin user to assign this school to this user\nconst updatedSchooladmin = {\n    school: schoolId\n};\nconst updateSchooladminRes = await request(app)\n    .put(`/api/users/${schooladminId}`)\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(updatedSchooladmin);\nexpect(updateSchooladminRes.status).to.equal(200);\nexpect(updateSchooladminRes.body.school).to.equal(schoolId);\n// Create a classroom with schooladmin user with capacity as 1\nconst newClassroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 1,\n    resources: ['Projector', 'Whiteboard']\n};\nconst classroomRes = await request(app)\n    .post('/api/classrooms')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newClassroom);\nclassroomId = classroomRes.body._id;",
              "err": {},
              "uuid": "9cccc2e3-9506-484c-867a-2a7570626822",
              "parentUUID": "b8950c70-339c-4163-9cab-70b238dc6d3f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"after all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users, schools, classrooms, and students collections after all tests\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\nawait classroomModel.deleteMany({});\nawait studentModel.deleteMany({});",
              "err": {},
              "uuid": "9e4e9e16-90ce-433a-ac8a-0b0c8bc05673",
              "parentUUID": "b8950c70-339c-4163-9cab-70b238dc6d3f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a student and assign it to the classroom",
              "fullTitle": "Student Entity Integration Tests should create a student and assign it to the classroom",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Test Student',\n    email: 'teststudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nstudentId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "45545a4d-d560-4fe1-9b28-4ecd17ba0186",
              "parentUUID": "b8950c70-339c-4163-9cab-70b238dc6d3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create another student in the same classroom due to capacity",
              "fullTitle": "Student Entity Integration Tests should fail to create another student in the same classroom due to capacity",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "26c8588d-674d-412c-ad6a-abc0fefb2f4b",
              "parentUUID": "b8950c70-339c-4163-9cab-70b238dc6d3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update classroom capacity to 30",
              "fullTitle": "Student Entity Integration Tests should update classroom capacity to 30",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    capacity: 30\n};\nconst updateRes = await request(app)\n    .put(`/api/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedClassroom);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.capacity).to.equal(updatedClassroom.capacity);",
              "err": {},
              "uuid": "4fb28b68-b836-4a82-ba06-37f2a0257692",
              "parentUUID": "b8950c70-339c-4163-9cab-70b238dc6d3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create another student and assign it to the classroom successfully",
              "fullTitle": "Student Entity Integration Tests should create another student and assign it to the classroom successfully",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n    .post('/api/students')\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(newStudent);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "5bd978d6-2eb3-4062-b7da-cbc158c3f10f",
              "parentUUID": "b8950c70-339c-4163-9cab-70b238dc6d3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student information",
              "fullTitle": "Student Entity Integration Tests should update a student information",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedStudent = {\n    name: 'Updated Student'\n};\nconst updateRes = await request(app)\n    .put(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`)\n    .send(updatedStudent);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedStudent.name);",
              "err": {},
              "uuid": "fa86c042-7bf5-4a4b-b806-3b12c279f729",
              "parentUUID": "b8950c70-339c-4163-9cab-70b238dc6d3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a student by ID",
              "fullTitle": "Student Entity Integration Tests should get a student by ID",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Updated Student');\nexpect(getRes.body.email).to.equal('teststudent@example.com');\nexpect(getRes.body.classroom._id).to.equal(classroomId);\nexpect(getRes.body.age).to.equal(20);\nexpect(getRes.body.address).to.equal('123 Test St');",
              "err": {},
              "uuid": "aacbf3d4-6ec9-429a-ab44-a8f102f42d0c",
              "parentUUID": "b8950c70-339c-4163-9cab-70b238dc6d3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get students by classroom",
              "fullTitle": "Student Entity Integration Tests should get students by classroom",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/students/classrooms/${classroomId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1);\nexpect(getRes.body[0].classroom._id).to.equal(classroomId);",
              "err": {},
              "uuid": "0b57f121-7b65-4fc6-b54d-d643530f893a",
              "parentUUID": "b8950c70-339c-4163-9cab-70b238dc6d3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Entity Integration Tests should delete a student",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/students/${studentId}`)\n    .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "365c1799-c208-4bff-afd7-4dd6e187aef8",
              "parentUUID": "b8950c70-339c-4163-9cab-70b238dc6d3f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45545a4d-d560-4fe1-9b28-4ecd17ba0186",
            "26c8588d-674d-412c-ad6a-abc0fefb2f4b",
            "4fb28b68-b836-4a82-ba06-37f2a0257692",
            "5bd978d6-2eb3-4062-b7da-cbc158c3f10f",
            "fa86c042-7bf5-4a4b-b806-3b12c279f729",
            "aacbf3d4-6ec9-429a-ab44-a8f102f42d0c",
            "0b57f121-7b65-4fc6-b54d-d643530f893a",
            "365c1799-c208-4bff-afd7-4dd6e187aef8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 301,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "10e5cf5d-cb25-442d-9256-4f0c04541135",
          "title": "User Entity Integration Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/integration/user.integration.test.js",
          "file": "/tests/integration/user.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Entity Integration Tests\"",
              "fullTitle": "User Entity Integration Tests \"before all\" hook in \"User Entity Integration Tests\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await userModel.deleteMany({});",
              "err": {},
              "uuid": "d237c083-fd6b-43f8-94b4-f6edc32bed57",
              "parentUUID": "10e5cf5d-cb25-442d-9256-4f0c04541135",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User Entity Integration Tests should create a new user",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n    username: 'Test User',\n    email: 'testuser@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\n\nuserId = res.body.user._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('user');\nexpect(res.body.user.username).to.equal(newUser.username);\nexpect(res.body.user.email).to.equal(newUser.email);",
              "err": {},
              "uuid": "a04879ad-a30f-4692-bca5-40767078471e",
              "parentUUID": "10e5cf5d-cb25-442d-9256-4f0c04541135",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate a user",
              "fullTitle": "User Entity Integration Tests should authenticate a user",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@example.com',\n    password: 'password123'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = res.body.token;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
              "err": {},
              "uuid": "e164893b-0d86-4aae-9a7f-3893eea8bb9a",
              "parentUUID": "10e5cf5d-cb25-442d-9256-4f0c04541135",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid credentials",
              "fullTitle": "User Entity Integration Tests should return 400 for invalid credentials",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@example.com',\n    password: 'wrongpassword'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "9197b1a5-aa3a-4b06-9b65-045936f11321",
              "parentUUID": "10e5cf5d-cb25-442d-9256-4f0c04541135",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Entity Integration Tests should update a user",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n    username: 'Updated User'\n};\nconst updateRes = await request(app)\n    .put(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedUser);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.username).to.equal(updatedUser.username);",
              "err": {},
              "uuid": "e5e1daad-e8e3-4b75-b8b0-fde5121ce189",
              "parentUUID": "10e5cf5d-cb25-442d-9256-4f0c04541135",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Entity Integration Tests should delete a user",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`);\n\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "60538205-3c6c-416d-a1fa-31b8d1f24fef",
              "parentUUID": "10e5cf5d-cb25-442d-9256-4f0c04541135",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a04879ad-a30f-4692-bca5-40767078471e",
            "e164893b-0d86-4aae-9a7f-3893eea8bb9a",
            "9197b1a5-aa3a-4b06-9b65-045936f11321",
            "e5e1daad-e8e3-4b75-b8b0-fde5121ce189",
            "60538205-3c6c-416d-a1fa-31b8d1f24fef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 247,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9a986a34-2a65-4557-94b1-3df834dc48d3",
          "title": "Classroom Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/classroom.test.js",
          "file": "/tests/unit/classroom.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"before each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'findById');",
              "err": {},
              "uuid": "63b0d2e9-6bdd-4171-b401-8157a24025b1",
              "parentUUID": "9a986a34-2a65-4557-94b1-3df834dc48d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"after each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.restore();",
              "err": {},
              "uuid": "4a2fd00b-1d3f-4bbd-93a6-17e0029c9701",
              "parentUUID": "9a986a34-2a65-4557-94b1-3df834dc48d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a classroom by ID",
              "fullTitle": "Classroom Model Unit Tests should find a classroom by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nclassroomStub.resolves(mockClassroom);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.deep.equal(mockClassroom);",
              "err": {},
              "uuid": "e4ec20cd-6408-4aa6-acfb-eef99d62c003",
              "parentUUID": "9a986a34-2a65-4557-94b1-3df834dc48d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if classroom not found",
              "fullTitle": "Classroom Model Unit Tests should return null if classroom not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.resolves(null);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.be.null;",
              "err": {},
              "uuid": "2f976a39-d537-4e86-9c08-7a53136dd992",
              "parentUUID": "9a986a34-2a65-4557-94b1-3df834dc48d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new classroom",
              "fullTitle": "Classroom Model Unit Tests should create a new classroom",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst createStub = sinon.stub(classroomModel.prototype, 'save').resolves(mockClassroom);\nconst newClassroom = new classroomModel(mockClassroom);\nconst savedClassroom = await newClassroom.save();\nexpect(savedClassroom).to.deep.equal(mockClassroom);\ncreateStub.restore();",
              "err": {},
              "uuid": "fa64e59f-67bf-42cc-a829-6c2c71f99c7b",
              "parentUUID": "9a986a34-2a65-4557-94b1-3df834dc48d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom",
              "fullTitle": "Classroom Model Unit Tests should update a classroom",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Updated Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst updateStub = sinon.stub(classroomModel, 'findByIdAndUpdate').resolves(mockClassroom);\nconst updatedClassroom = await classroomModel.findByIdAndUpdate('123', { name: 'Updated Classroom' }, { new: true });\nexpect(updatedClassroom).to.deep.equal(mockClassroom);\nupdateStub.restore();",
              "err": {},
              "uuid": "d09a07e9-54ba-46ec-8f95-ba6e18443fd1",
              "parentUUID": "9a986a34-2a65-4557-94b1-3df834dc48d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Model Unit Tests should delete a classroom",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(classroomModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedClassroom = await classroomModel.findByIdAndDelete('123');\nexpect(deletedClassroom).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "0a10ea00-888b-41ef-be75-d5fe81bc5290",
              "parentUUID": "9a986a34-2a65-4557-94b1-3df834dc48d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all classrooms",
              "fullTitle": "Classroom Model Unit Tests should get all classrooms",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'find');\nconst mockClassrooms = [\n    { id: '123', name: 'Classroom 1', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] },\n    { id: '124', name: 'Classroom 2', school: '456', capacity: 25, resources: ['Projector'] }\n];\nclassroomStub.resolves(mockClassrooms);\nconst classrooms = await classroomModel.find();\nexpect(classrooms).to.deep.equal(mockClassrooms);",
              "err": {},
              "uuid": "e2f3d692-1109-4ae0-95fe-078a5d9de1a8",
              "parentUUID": "9a986a34-2a65-4557-94b1-3df834dc48d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4ec20cd-6408-4aa6-acfb-eef99d62c003",
            "2f976a39-d537-4e86-9c08-7a53136dd992",
            "fa64e59f-67bf-42cc-a829-6c2c71f99c7b",
            "d09a07e9-54ba-46ec-8f95-ba6e18443fd1",
            "0a10ea00-888b-41ef-be75-d5fe81bc5290",
            "e2f3d692-1109-4ae0-95fe-078a5d9de1a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "056a326d-bbfb-41bc-a211-480c30eefb93",
          "title": "School Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/school.test.js",
          "file": "/tests/unit/school.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"before each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub = sinon.stub(schoolModel, 'findById');",
              "err": {},
              "uuid": "4ab2d6a4-1932-42fb-8035-71fc9a1598ba",
              "parentUUID": "056a326d-bbfb-41bc-a211-480c30eefb93",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"after each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.restore();",
              "err": {},
              "uuid": "df537978-182c-4bec-acdf-0c6cdeb56df5",
              "parentUUID": "056a326d-bbfb-41bc-a211-480c30eefb93",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a school by ID",
              "fullTitle": "School Model Unit Tests should find a school by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nschoolStub.resolves(mockSchool);\nconst school = await schoolModel.findById('123');\nexpect(school).to.deep.equal(mockSchool);",
              "err": {},
              "uuid": "84500cc4-e81f-4322-adb6-4fc5d63adf91",
              "parentUUID": "056a326d-bbfb-41bc-a211-480c30eefb93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if school not found",
              "fullTitle": "School Model Unit Tests should return null if school not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.resolves(null);\nconst school = await schoolModel.findById('123');\nexpect(school).to.be.null;",
              "err": {},
              "uuid": "22c7bf22-527e-405b-8747-3d6b1326202c",
              "parentUUID": "056a326d-bbfb-41bc-a211-480c30eefb93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new school",
              "fullTitle": "School Model Unit Tests should create a new school",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nconst createStub = sinon.stub(schoolModel.prototype, 'save').resolves(mockSchool);\nconst newSchool = new schoolModel(mockSchool);\nconst savedSchool = await newSchool.save();\nexpect(savedSchool).to.deep.equal(mockSchool);\ncreateStub.restore();",
              "err": {},
              "uuid": "f66c2a81-0e36-468b-ab18-ecf45a2b10be",
              "parentUUID": "056a326d-bbfb-41bc-a211-480c30eefb93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Model Unit Tests should update a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Updated School' };\nconst updateStub = sinon.stub(schoolModel, 'findByIdAndUpdate').resolves(mockSchool);\nconst updatedSchool = await schoolModel.findByIdAndUpdate('123', { name: 'Updated School' }, { new: true });\nexpect(updatedSchool).to.deep.equal(mockSchool);\nupdateStub.restore();",
              "err": {},
              "uuid": "1b3f744b-6c72-400b-ad0f-0b1fb5eef011",
              "parentUUID": "056a326d-bbfb-41bc-a211-480c30eefb93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Model Unit Tests should delete a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(schoolModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedSchool = await schoolModel.findByIdAndDelete('123');\nexpect(deletedSchool).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "ef1bb0cf-99ac-4d54-9195-5600997b057c",
              "parentUUID": "056a326d-bbfb-41bc-a211-480c30eefb93",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "84500cc4-e81f-4322-adb6-4fc5d63adf91",
            "22c7bf22-527e-405b-8747-3d6b1326202c",
            "f66c2a81-0e36-468b-ab18-ecf45a2b10be",
            "1b3f744b-6c72-400b-ad0f-0b1fb5eef011",
            "ef1bb0cf-99ac-4d54-9195-5600997b057c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2b8fed89-0faf-4fb8-a21c-051d35c24236",
          "title": "Student Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/student.test.js",
          "file": "/tests/unit/student.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"before each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub = sinon.stub(studentModel, 'findById');",
              "err": {},
              "uuid": "cfabb9c2-0ab5-4d39-8268-12c24ca8cd7b",
              "parentUUID": "2b8fed89-0faf-4fb8-a21c-051d35c24236",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"after each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.restore();",
              "err": {},
              "uuid": "33fdac82-416c-42fe-9c89-55882147de11",
              "parentUUID": "2b8fed89-0faf-4fb8-a21c-051d35c24236",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a student by ID",
              "fullTitle": "Student Model Unit Tests should find a student by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nstudentStub.resolves(mockStudent);\nconst student = await studentModel.findById('123');\nexpect(student).to.deep.equal(mockStudent);",
              "err": {},
              "uuid": "f14fbc5c-e84f-46ed-aa21-b8d2df9a5549",
              "parentUUID": "2b8fed89-0faf-4fb8-a21c-051d35c24236",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if student not found",
              "fullTitle": "Student Model Unit Tests should return null if student not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.resolves(null);\nconst student = await studentModel.findById('123');\nexpect(student).to.be.null;",
              "err": {},
              "uuid": "61ead1fb-1773-4d23-bb82-dfb6b634de74",
              "parentUUID": "2b8fed89-0faf-4fb8-a21c-051d35c24236",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new student",
              "fullTitle": "Student Model Unit Tests should create a new student",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nconst createStub = sinon.stub(studentModel.prototype, 'save').resolves(mockStudent);\nconst newStudent = new studentModel(mockStudent);\nconst savedStudent = await newStudent.save();\nexpect(savedStudent).to.deep.equal(mockStudent);\ncreateStub.restore();",
              "err": {},
              "uuid": "672948fe-9619-4c41-b374-2f493ee545e5",
              "parentUUID": "2b8fed89-0faf-4fb8-a21c-051d35c24236",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student",
              "fullTitle": "Student Model Unit Tests should update a student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Updated Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nconst updateStub = sinon.stub(studentModel, 'findByIdAndUpdate').resolves(mockStudent);\nconst updatedStudent = await studentModel.findByIdAndUpdate('123', { name: 'Updated Student' }, { new: true });\nexpect(updatedStudent).to.deep.equal(mockStudent);\nupdateStub.restore();",
              "err": {},
              "uuid": "900e37de-79da-4c5c-a6bc-60a4a2d6154f",
              "parentUUID": "2b8fed89-0faf-4fb8-a21c-051d35c24236",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Model Unit Tests should delete a student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(studentModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedStudent = await studentModel.findByIdAndDelete('123');\nexpect(deletedStudent).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "4c19238b-8a97-4a14-9016-ec9f62492f57",
              "parentUUID": "2b8fed89-0faf-4fb8-a21c-051d35c24236",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f14fbc5c-e84f-46ed-aa21-b8d2df9a5549",
            "61ead1fb-1773-4d23-bb82-dfb6b634de74",
            "672948fe-9619-4c41-b374-2f493ee545e5",
            "900e37de-79da-4c5c-a6bc-60a4a2d6154f",
            "4c19238b-8a97-4a14-9016-ec9f62492f57"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "acf757c8-900d-4a9e-9f70-71b7f284890f",
          "title": "User Model Unit Tests",
          "fullFile": "/Users/dhairya/Desktop/Work/Soar/Github/Soar-Backend-Developer-Technical-Challenge/tests/unit/user.test.js",
          "file": "/tests/unit/user.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"before each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub = sinon.stub(userModel, 'findById');",
              "err": {},
              "uuid": "85c7cc5e-cb38-41a4-bc21-e4992f391d15",
              "parentUUID": "acf757c8-900d-4a9e-9f70-71b7f284890f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"after each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.restore();",
              "err": {},
              "uuid": "55ade11d-5e8a-4680-8a5b-fc3a6e49e51d",
              "parentUUID": "acf757c8-900d-4a9e-9f70-71b7f284890f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a user by ID",
              "fullTitle": "User Model Unit Tests should find a user by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User' };\nuserStub.resolves(mockUser);\nconst user = await userModel.findById('123');\nexpect(user).to.deep.equal(mockUser);",
              "err": {},
              "uuid": "1f2a9fc0-64cf-407c-9ab0-4dfbd6d34e87",
              "parentUUID": "acf757c8-900d-4a9e-9f70-71b7f284890f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if user not found",
              "fullTitle": "User Model Unit Tests should return null if user not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.resolves(null);\nconst user = await userModel.findById('123');\nexpect(user).to.be.null;",
              "err": {},
              "uuid": "9f5a0a24-d522-4b13-8363-b82953475529",
              "parentUUID": "acf757c8-900d-4a9e-9f70-71b7f284890f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user",
              "fullTitle": "User Model Unit Tests should create a new user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@example.com', password: 'password123' };\nconst createStub = sinon.stub(userModel.prototype, 'save').resolves(mockUser);\nconst newUser = new userModel(mockUser);\nconst savedUser = await newUser.save();\nexpect(savedUser).to.deep.equal(mockUser);\ncreateStub.restore();",
              "err": {},
              "uuid": "c0794abc-6f1c-4820-861b-52763f27b046",
              "parentUUID": "acf757c8-900d-4a9e-9f70-71b7f284890f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find a user by email",
              "fullTitle": "User Model Unit Tests should find a user by email",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@example.com' };\nconst findStub = sinon.stub(userModel, 'findOne').resolves(mockUser);\nconst user = await userModel.findOne({ email: 'testuser@example.com' });\nexpect(user).to.deep.equal(mockUser);\nfindStub.restore();",
              "err": {},
              "uuid": "f6232f94-ed61-4611-86dc-d1d6e262d493",
              "parentUUID": "acf757c8-900d-4a9e-9f70-71b7f284890f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Model Unit Tests should update a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Updated User', email: 'testuser@example.com' };\nconst updateStub = sinon.stub(userModel, 'findByIdAndUpdate').resolves(mockUser);\nconst updatedUser = await userModel.findByIdAndUpdate('123', { name: 'Updated User' }, { new: true });\nexpect(updatedUser).to.deep.equal(mockUser);\nupdateStub.restore();",
              "err": {},
              "uuid": "50c9d897-b985-4967-a8a9-b075997a8cad",
              "parentUUID": "acf757c8-900d-4a9e-9f70-71b7f284890f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Model Unit Tests should delete a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(userModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedUser = await userModel.findByIdAndDelete('123');\nexpect(deletedUser).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "f0c0a4f0-b4c7-47b5-b8c4-e3366f98cc7e",
              "parentUUID": "acf757c8-900d-4a9e-9f70-71b7f284890f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f2a9fc0-64cf-407c-9ab0-4dfbd6d34e87",
            "9f5a0a24-d522-4b13-8363-b82953475529",
            "c0794abc-6f1c-4820-861b-52763f27b046",
            "f6232f94-ed61-4611-86dc-d1d6e262d493",
            "50c9d897-b985-4967-a8a9-b075997a8cad",
            "f0c0a4f0-b4c7-47b5-b8c4-e3366f98cc7e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}